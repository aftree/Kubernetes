<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算、存储和网络扩展 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/concepts/extend-kubernetes/compute-storage-net/</link>
    <description>Recent content in 计算、存储和网络扩展 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/concepts/extend-kubernetes/compute-storage-net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>网络插件</title>
      <link>https://lijun.in/concepts/extend-kubernetes/compute-storage-net/network-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/extend-kubernetes/compute-storage-net/network-plugins/</guid>
      <description>state=&amp;quot;alpha&amp;rdquo; &amp;gt;}}
Alpha 特性迅速变化。
Kubernetes中的网络插件有几种类型：
 CNI 插件： 遵守 appc/CNI 规约，为互操作性设计。 Kubenet 插件：使用 bridge 和 host-local CNI 插件实现了基本的 cbr0。  安装 kubelet 有一个单独的默认网络插件，以及一个对整个集群通用的默认网络。 它在启动时探测插件，记住找到的内容，并在 pod 生命周期的适当时间执行所选插件（这仅适用于 Docker，因为 rkt 管理自己的 CNI 插件）。 在使用插件时，需要记住两个 Kubelet 命令行参数：
 cni-bin-dir： Kubelet 在启动时探测这个目录中的插件 network-plugin： 要使用的网络插件来自 cni-bin-dir。它必须与从插件目录探测到的插件报告的名称匹配。对于 CNI 插件，其值为 &amp;ldquo;cni&amp;rdquo;。  网络插件要求 除了提供[NetworkPlugin 接口](https://github.com/kubernetes/kubernetes/tree/param &amp;ldquo;fullversion&amp;rdquo; &amp;gt;}}/pkg/kubelet/dockershim/network/plugins.go)来配置和清理 pod 网络之外，该插件还可能需要对 kube-proxy 的特定支持。 iptables 代理显然依赖于 iptables，插件可能需要确保 iptables 能够监控容器的网络通信。 例如，如果插件将容器连接到 Linux 网桥，插件必须将 net/bridge/bridge-nf-call-iptables 系统参数设置为1，以确保 iptables 代理正常工作。 如果插件不使用 Linux 网桥（而是类似于 Open vSwitch 或者其它一些机制），它应该确保为代理对容器通信执行正确的路由。</description>
    </item>
    
    <item>
      <title>设备插件</title>
      <link>https://lijun.in/concepts/extend-kubernetes/compute-storage-net/device-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/extend-kubernetes/compute-storage-net/device-plugins/</guid>
      <description>for_k8s_version=&amp;quot;v1.10&amp;rdquo; state=&amp;quot;beta&amp;rdquo; &amp;gt;}}
Kubernetes 提供了一个设备插件框架，您可以用来将系统硬件资源发布到 term_id=&amp;quot;kubelet&amp;rdquo; &amp;gt;}}。
供应商可以实现设备插件，由您手动部署或作为 term_id=&amp;quot;daemonset&amp;rdquo; &amp;gt;}} 来部署，而不必定制 Kubernetes 本身的代码。目标设备包括 GPU、高性能 NIC、FPGA、InfiniBand 适配器以及其他类似的、可能需要特定于供应商的初始化和设置的计算资源。
注册设备插件 kubelet 输出了一个 Registration 的 gRPC 服务：
service Registration { rpc Register(RegisterRequest) returns (Empty) {} } 设备插件可以通过此 gRPC 服务在 kubelet 进行注册。在注册期间，设备插件需要发送下面几样内容：
 设备插件的 Unix 套接字。 设备插件的 API 版本。 ResourceName 是需要公布的。这里 ResourceName 需要遵循扩展资源命名方案，类似于 vendor-domain/resourcetype。（比如 NVIDIA GPU 就被公布为 nvidia.com/gpu。）  成功注册后，设备插件就向 kubelet 发送他所管理的设备列表，然后 kubelet 负责将这些资源发布到 API 服务器，作为 kubelet 节点状态更新的一部分。
比如，设备插件在 kubelet 中注册了 hardware-vendor.example/foo 并报告了节点上的两个运行状况良好的设备后，节点状态将更新以通告该节点已安装2个 Foo 设备并且是可用的。</description>
    </item>
    
  </channel>
</rss>