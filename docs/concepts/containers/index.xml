<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😊 - 容器 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/concepts/containers/</link>
    <description>Recent content in 😊 - 容器 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/concepts/containers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>容器概述</title>
      <link>https://lijun.in/concepts/containers/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/containers/overview/</guid>
      <description>容器是一种用来打包已经编译好的代码以及运行时需要的各个依赖项的技术。您运行的每个容器都是可以重复运行的；包含依赖项的标准化意味着您在任何地点运行它都会得到相同的结果。
容器将应用程序和底层主机架构解耦，这使得在不同的云或OS环境中部署应用更加容易。
容器镜像 容器镜像是一个现成的软件包，包含了运行应用程序时所需要的一切：代码和任何运行时所需的东西，应用程序和系统库，以及任何基本设置的默认值。
根据设计，容器是不可变的：你不能更改已经在运行的容器中的代码。如果您有一个容器化的应用程序，想要做一些更改，您需要构建一个新的容器，来包含所做的更改，然后使用已经更新过的镜像来重新创建容器。
##容器运行时
term_id=&amp;quot;container-runtime&amp;rdquo; length=&amp;quot;all&amp;rdquo; &amp;gt;}}
  阅读有关容器镜像 阅读有关 Pods  </description>
    </item>
    
    <item>
      <title>镜像</title>
      <link>https://lijun.in/concepts/containers/images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/containers/images/</guid>
      <description>创建 Docker 镜像并将其推送到仓库，然后在 Kubernetes pod 中引用它。
容器的 image 属性支持与 docker 命令相同的语法，包括私有仓库和标签。
升级镜像 默认的镜像拉取策略是 IfNotPresent，在镜像已经存在的情况下，kubelet 将不再去拉取镜像。如果总是想要拉取镜像，您可以执行以下操作：
 设置容器的 imagePullPolicy 为 Always。 省略 imagePullPolicy，并使用 :latest 作为要使用的镜像的标签。 省略 imagePullPolicy 和要使用的镜像标签。 启用 AlwaysPullImages 准入控制器（admission controller）。  注意应避免使用 :latest 标签，参见配置镜像最佳实践 获取更多信息。
使用清单（manifest）构建多架构镜像 Docker CLI 现在支持以下命令 docker manifest 以及 create、annotate、push 等子命令。这些命令可用于构建和推送清单。您可以使用 docker manifest inspect 来查看清单。
请在此处查看 docker 清单文档： https://docs.docker.com/edge/engine/reference/commandline/manifest/
查看有关如何在构建工具中使用清单的示例： https://cs.k8s.io/?q=docker%20manifest%20(create%7Cpush%7Cannotate)&amp;amp;i=nope&amp;amp;files=&amp;amp;repos=
这些命令依赖于 Docker CLI 并仅在 Docker CLI 上实现。需要编辑 $HOME/.docker/config.json 并将 experimental 设置为 enabled，或者仅在调用 CLI 命令时将 DOCKER_CLI_EXPERIMENTAL 环境变量设置为 enabled。</description>
    </item>
    
    <item>
      <title>容器环境</title>
      <link>https://lijun.in/concepts/containers/container-environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/containers/container-environment/</guid>
      <description>本页描述了在容器环境里容器可用的资源。
容器环境 Kubernetes 的容器环境给容器提供了几个重要的资源：
 文件系统，其中包含一个镜像 和一个或多个的卷。 容器自身的信息。 集群中其他对象的信息。  容器信息 容器的 hostname 是它所运行在的 pod 的名称。它可以通过 hostname 命令或者调用 libc 中的 gethostname 函数来获取。
Pod 名称和命名空间可以通过 downward API 使用环境变量。
Pod 定义中的用户所定义的环境变量也可在容器中使用，就像在 Docker 镜像中静态指定的任何环境变量一样。
集群信息 创建容器时正在运行的所有服务的列表都可用作该容器的环境变量。这些环境变量与 Docker 链接的语法匹配。
对于名为 foo 的服务，当映射到名为 bar 的容器时，以下变量是被定义了的：
FOO_SERVICE_HOST=&amp;lt;the host the service is running on&amp;gt; FOO_SERVICE_PORT=&amp;lt;the port the service is running on&amp;gt; Service 具有专用的 IP 地址。如果启用了 [DNS插件](http://releases.k8s.io/&amp;lt; param &amp;ldquo;githubbranch&amp;rdquo; &amp;gt;}}/cluster/addons/dns/)，就可以在容器中通过 DNS 来访问。
  学习更多有关容器生命周期钩子的知识。 动手获得经验将处理程序附加到容器生命周期事件。  </description>
    </item>
    
    <item>
      <title>容器运行时类(Runtime Class)</title>
      <link>https://lijun.in/concepts/containers/runtime-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/containers/runtime-class/</guid>
      <description>for_k8s_version=&amp;quot;v1.14&amp;rdquo; state=&amp;quot;beta&amp;rdquo; &amp;gt;}}
本页面描述了 RuntimeClass 资源和运行时的选择机制。
RuntimeClass 是一个用于选择容器运行时配置的特性，容器运行时配置用于运行 Pod 中的容器。
动机 您可以在不同的 pod 之间设置不同的 RuntimeClass，以提供性能与安全性之间的平衡。 例如，如果您的部分工作负载需要高级别的信息安全保证，那么您可以选择性地调度这些 pod， 使它们在使用硬件虚拟化的容器运行时中运行。 然后，您将从可选运行时的额外隔离中获益，代价是一些额外的开销。
您还可以使用 RuntimeClass 运行具有相同容器运行时但具有不同设置的pod。
设置 确保 RuntimeClass 特性开关处于开启状态（默认为开启状态）。 关于特性开关的详细介绍，请查阅 Feature Gates。 RuntimeClass 特性开关必须在 apiserver 和 kubelet 同时开启。
 在节点上配置 CRI 的实现（取决于所选用的运行时） 创建相应的 RuntimeClass 资源  1. 在节点上配置 CRI 实现 RuntimeClass 的配置依赖于 运行时接口（CRI）的实现。 根据你使用的 CRI 实现，查阅相关的文档（下方）来了解如何配置。
RuntimeClass 假设集群中的节点配置是同构的（换言之，所有的节点在容器运行时方面的配置是相同的）。 如果需要支持异构节点，配置方法请参阅下面的 调度。
所有这些配置都具有相应的 handler 名，并被 RuntimeClass 引用。 handler 必须符合 DNS-1123 命名规范（字母、数字、或 -）。
2. 创建相应的 RuntimeClass 资源 在上面步骤 1 中，每个配置都需要有一个用于标识配置的 handler。 针对每个 handler 需要创建一个 RuntimeClass 对象。</description>
    </item>
    
    <item>
      <title>容器生命周期钩子</title>
      <link>https://lijun.in/concepts/containers/container-lifecycle-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/containers/container-lifecycle-hooks/</guid>
      <description>这个页面描述了 kubelet 管理的容器如何使用容器生命周期钩子框架来运行在其管理生命周期中由事件触发的代码。
概述 类似于许多具有生命周期钩子组件的编程语言框架，例如 Angular、Kubernetes 为容器提供了生命周期钩子。 钩子使容器能够了解其管理生命周期中的事件，并在执行相应的生命周期钩子时运行在处理程序中实现的代码。
容器钩子 有两个钩子暴露在容器中:
PostStart
这个钩子在创建容器之后立即执行。 但是，不能保证钩子会在容器入口点之前执行。 没有参数传递给处理程序。
PreStop
在容器终止之前是否立即调用此钩子，取决于 API 的请求或者管理事件，类似活动探针故障、资源抢占、资源竞争等等。 如果容器已经完全处于终止或者完成状态，则对 preStop 钩子的调用将失败。 它是阻塞的，同时也是同步的，因此它必须在删除容器的调用之前完成。 没有参数传递给处理程序。
有关终止行为的更详细描述，请参见终止 Pod。
钩子处理程序的实现 容器可以通过实现和注册该钩子的处理程序来访问该钩子。 针对容器，有两种类型的钩子处理程序可供实现：
 Exec - 执行一个特定的命令，例如 pre-stop.sh，在容器的 cgroups 和名称空间中。 命令所消耗的资源根据容器进行计算。 HTTP - 对容器上的特定端点执行 HTTP 请求。  钩子处理程序执行 当调用容器生命周期管理钩子时，Kubernetes 管理系统在为该钩子注册的容器中执行处理程序。
钩子处理程序调用在包含容器的 Pod 上下文中是同步的。 这意味着对于 PostStart 钩子，容器入口点和钩子异步触发。 但是，如果钩子运行或挂起的时间太长，则容器无法达到 running 状态。
行为与 PreStop 钩子的行为类似。 如果钩子在执行过程中挂起，Pod 阶段将保持在 Terminating 状态，并在 Pod 结束的 terminationGracePeriodSeconds 之后被杀死。 如果 PostStart 或 PreStop 钩子失败，它会杀死容器。</description>
    </item>
    
    <item>
      <title>容器环境变量</title>
      <link>https://lijun.in/concepts/containers/container-environment-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/containers/container-environment-variables/</guid>
      <description>本文介绍容器环境中对容器可用的资源。
容器环境 Kubernetes 容器环境为容器提供了几类重要的资源：
 一个文件系统，其中包含一个镜像和一个或多个卷。 容器本身相关的信息。 集群中其他对象相关的信息。  容器信息 容器的 hostname 是容器所在的 Pod 名称。 可以通过 hostname 命令或调用 libc 中的 gethostname 函数来获取。
Pod 名称和名字空间可以通过 downward API 以环境变量方式访问。
与 Docker 镜像中静态指定的环境变量一样，Pod 中用户定义的环境变量也可用于容器。
集群信息 容器创建时运行的所有服务的列表都会作为环境变量提供给容器。 这些环境变量与 Docker 链接语法相匹配。
对一个名为 foo ，映射到名为 bar 的容器端口的服务， 会定义如下变量：
FOO_SERVICE_HOST=&amp;lt;服务所在的主机地址&amp;gt; FOO_SERVICE_PORT=&amp;lt;服务所启用的端口&amp;gt; 服务具有专用 IP 地址，如果启用了 [DNS 插件](http://releases.k8s.io/ param &amp;ldquo;githubbranch&amp;rdquo; &amp;gt;}}/cluster/addons/dns/)，还可以在容器中通过 DNS 进行访问。
  查看容器生命周期挂钩（hooks）了解更多。 获取为容器生命周期事件附加处理程序的实践经验。  </description>
    </item>
    
  </channel>
</rss>