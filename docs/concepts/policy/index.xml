<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😊 - 策略 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/concepts/policy/</link>
    <description>Recent content in 😊 - 策略 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/concepts/policy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>资源配额</title>
      <link>https://lijun.in/concepts/policy/resource-quotas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/policy/resource-quotas/</guid>
      <description>当多个用户或团队共享具有固定节点数目的集群时，人们会担心有人使用超过其基于公平原则所分配到的资源量。
资源配额是帮助管理员解决这一问题的工具。
资源配额，通过 ResourceQuota 对象来定义，对每个命名空间的资源消耗总量提供限制。它可以限制命名空间中某种类型的对象的总数目上限，也可以限制命令空间中的 Pod 可以使用的计算资源的总上限。
资源配额的工作方式如下：
 不同的团队可以在不同的命名空间下工作，目前这是非约束性的，在未来的版本中可能会通过 ACL (Access Control List 访问控制列表) 来实现强制性约束。 集群管理员可以为每个命名空间创建一个或多个资源配额对象。 当用户在命名空间下创建资源（如 Pod、Service 等）时，Kubernetes 的配额系统会跟踪集群的资源使用情况，以确保使用的资源用量不超过资源配额中定义的硬性资源限额。 如果资源创建或者更新请求违反了配额约束，那么该请求会报错（HTTP 403 FORBIDDEN），并在消息中给出有可能违反的约束。 如果命名空间下的计算资源 （如 cpu 和 memory）的配额被启用，则用户必须为这些资源设定请求值（request）和约束值（limit），否则配额系统将拒绝 Pod 的创建。 提示: 可使用 LimitRanger 准入控制器来为没有设置计算资源需求的 Pod 设置默认值。 若想避免这类问题，请参考演练中的示例。  下面是使用命名空间和配额构建策略的示例：
 在具有 32 GiB 内存和 16 核 CPU 资源的集群中，允许 A 团队使用 20 GiB 内存 和 10 核的 CPU 资源，允许 B 团队使用 10 GiB 内存和 4 核的 CPU 资源，并且预留 2 GiB 内存和 2 核的 CPU 资源供将来分配。 限制 &amp;ldquo;testing&amp;rdquo; 命名空间使用 1 核 CPU 资源和 1GiB 内存。允许 &amp;ldquo;production&amp;rdquo; 命名空间使用任意数量。  在集群容量小于各命名空间配额总和的情况下，可能存在资源竞争。资源竞争时，Kubernetes 系统会遵循先到先得的原则。</description>
    </item>
    
    <item>
      <title>限制范围</title>
      <link>https://lijun.in/concepts/policy/limit-range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/policy/limit-range/</guid>
      <description>默认情况下， Kubernetes 集群上的容器运行使用的计算资源 没有限制。 使用资源配额，集群管理员可以以命名空间为单位，限制其资源的使用与创建。 在命名空间中，一个 Pod 或 Container 最多能够使用命名空间的资源配额所定义的 CPU 和内存用量。有人担心，一个 Pod 或 Container 会垄断所有可用的资源。LimitRange 是在命名空间内限制资源分配（给多个 Pod 或 Container）的策略对象。
一个 LimitRange 对象提供的限制能够做到：
 在一个命名空间中实施对每个 Pod 或 Container 最小和最大的资源使用量的限制。 在一个命名空间中实施对每个 PersistentVolumeClaim 能申请的最小和最大的存储空间大小的限制。 在一个命名空间中实施对一种资源的申请值和限制值的比值的控制。 设置一个命名空间中对计算资源的默认申请/限制值，并且自动的在运行时注入到多个 Container 中。  启用 LimitRange 对 LimitRange 的支持默认在多数 Kubernetes 发行版中启用。当 apiserver 的 --enable-admission-plugins 标志的参数包含 LimitRanger 准入控制器时即启用。
当一个命名空间中有 LimitRange 时，实施该 LimitRange 所定义的限制。
LimitRange 的名称必须是合法的 DNS 子域名。
限制范围总览  管理员在一个命名空间内创建一个 LimitRange 对象。 用户在命名空间内创建 Pod ，Container 和 PersistentVolumeClaim 等资源。 LimitRanger 准入控制器对所有没有设置计算资源需求的 Pod 和 Container 设置默认值与限制值，并跟踪其使用量以保证没有超出命名空间中存在的任意 LimitRange 对象中的最小、最大资源使用量以及使用量比值。 若创建或更新资源（Pod, Container, PersistentVolumeClaim）违反了 LimitRange 的约束，向 API 服务器的请求会失败，并返回 HTTP 状态码 403 FORBIDDEN 与描述哪一项约束被违反的消息。 若命名空间中的 LimitRange 启用了对 cpu 和 memory 的限制，用户必须指定这些值的需求使用量与限制使用量。否则，系统将会拒绝创建 Pod。 LimitRange 的验证仅在 Pod 准入阶段进行，不对正在运行的 Pod 进行验证。  能够使用限制范围创建策略的例子有：</description>
    </item>
    
    <item>
      <title>Pod 安全策略</title>
      <link>https://lijun.in/concepts/policy/pod-security-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/policy/pod-security-policy/</guid>
      <description>PodSecurityPolicy 类型的对象能够控制，是否可以向 Pod 发送请求，该 Pod 能够影响被应用到 Pod 和容器的 SecurityContext。 查看 Pod 安全策略建议 获取更多信息。
什么是 Pod 安全策略？ Pod 安全策略 是集群级别的资源，它能够控制 Pod 运行的行为，以及它具有访问什么的能力。 PodSecurityPolicy 对象定义了一组条件，指示 Pod 必须按系统所能接受的顺序运行。 它们允许管理员控制如下方面：
   控制面 字段名称     已授权容器的运行 privileged   为容器添加默认的一组能力 defaultAddCapabilities   为容器去掉某些能力 requiredDropCapabilities   容器能够请求添加某些能力 allowedCapabilities   控制卷类型的使用 volumes   主机网络的使用 hostNetwork   主机端口的使用 hostPorts   主机 PID namespace 的使用 hostPID   主机 IPC namespace 的使用 hostIPC   主机路径的使用 allowedHostPaths   容器的 SELinux 上下文 seLinux   用户 ID runAsUser   配置允许的补充组 supplementalGroups   分配拥有 Pod 数据卷的 FSGroup fsGroup   必须使用一个只读的 root 文件系统 readOnlyRootFilesystem    Pod 安全策略 由设置和策略组成，它们能够控制 Pod 访问的安全特征。这些设置分为如下三类：</description>
    </item>
    
  </channel>
</rss>