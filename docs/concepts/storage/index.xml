<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😊 - 存储 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/concepts/storage/</link>
    <description>Recent content in 😊 - 存储 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/concepts/storage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Volumes</title>
      <link>https://lijun.in/concepts/storage/volumes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/storage/volumes/</guid>
      <description>容器中的文件在磁盘上是临时存放的，这给容器中运行的特殊应用程序带来一些问题。 首先，当容器崩溃时，kubelet 将重新启动容器，容器中的文件将会丢失——因为容器会以干净的状态重建。 其次，当在一个 Pod 中同时运行多个容器时，常常需要在这些容器之间共享文件。 Kubernetes 抽象出 Volume 对象来解决这两个问题。
阅读本文前建议您熟悉一下 Pods。
背景 Docker 也有 Volume 的概念，但对它只有少量且松散的管理。 在 Docker 中，Volume 是磁盘上或者另外一个容器内的一个目录。 直到最近，Docker 才支持对基于本地磁盘的 Volume 的生存期进行管理。 虽然 Docker 现在也能提供 Volume 驱动程序，但是目前功能还非常有限（例如，截至 Docker 1.7，每个容器只允许有一个 Volume 驱动程序，并且无法将参数传递给卷）。
另一方面，Kubernetes 卷具有明确的生命周期——与包裹它的 Pod 相同。 因此，卷比 Pod 中运行的任何容器的存活期都长，在容器重新启动时数据也会得到保留。 当然，当一个 Pod 不再存在时，卷也将不再存在。也许更重要的是，Kubernetes 可以支持许多类型的卷，Pod 也能同时使用任意数量的卷。
卷的核心是包含一些数据的目录，Pod 中的容器可以访问该目录。 特定的卷类型可以决定这个目录如何形成的，并能决定它支持何种介质，以及目录中存放什么内容。
使用卷时, Pod 声明中需要提供卷的类型 (.spec.volumes 字段)和卷挂载的位置 (.spec.containers.volumeMounts 字段).
容器中的进程能看到由它们的 Docker 镜像和卷组成的文件系统视图。 Docker 镜像 位于文件系统层次结构的根部，并且任何 Volume 都挂载在镜像内的指定路径上。 卷不能挂载到其他卷，也不能与其他卷有硬链接。 Pod 中的每个容器必须独立地指定每个卷的挂载位置。
Volume 的类型 Kubernetes 支持下列类型的卷：</description>
    </item>
    
    <item>
      <title>卷快照</title>
      <link>https://lijun.in/concepts/storage/volume-snapshots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/storage/volume-snapshots/</guid>
      <description>feature-state for_k8s_version=&amp;quot;1.17&amp;rdquo; state=&amp;quot;beta&amp;rdquo; &amp;gt;}}
在 Kubernetes 中，卷快照是一个存储系统上卷的快照，本文假设你已经熟悉了 Kubernetes 的 持久卷。
介绍 与 PersistentVolume 和 PersistentVolumeClaim 两个 API 资源用于给用户和管理员提供卷类似，VolumeSnapshotContent 和 VolumeSnapshot 两个 API 资源用于给用户和管理员创建卷快照。
VolumeSnapshotContent 是一种快照，从管理员已提供的集群中的卷获取。就像持久卷是集群的资源一样，它也是集群中的资源。
VolumeSnapshot 是用户对于卷的快照的请求。它类似于持久卷声明。
VolumeSnapshotClass 允许指定属于 VolumeSnapshot 的不同属性。在从存储系统的相同卷上获取的快照之间，这些属性可能有所不同，因此不能通过使用与 PersistentVolumeClaim 相同的 StorageClass 来表示。
当使用该功能时，用户需要注意以下几点：
 API 对象 VolumeSnapshot，VolumeSnapshotContent 和 VolumeSnapshotClass 是 glossary_tooltip term_id=&amp;quot;CustomResourceDefinition&amp;rdquo; text=&amp;quot;CRDs&amp;rdquo; &amp;gt;}}，不是核心 API 的部分。 VolumeSnapshot 支持仅可用于 CSI 驱动。 作为 beta 版本 VolumeSnapshot 部署过程的一部分，Kubernetes 团队提供了一个部署于控制平面的快照控制器，并且提供了一个叫做 csi-snapshotter 的 sidecar 帮助容器，它和 CSI 驱动程序部署在一起。快照控制器监视 VolumeSnapshot 和 VolumeSnapshotContent 对象，并且负责动态的创建和删除 VolumeSnapshotContent 对象。sidecar csi-snapshotter 监视 VolumeSnapshotContent 对象，并且触发针对 CSI 端点的 CreateSnapshot 和 DeleteSnapshot 的操作。 CSI 驱动可能实现，也可能没有实现卷快照功能。CSI 驱动可能会使用 csi-snapshotter 来提供对卷快照的支持。详见 CSI 驱动程序文档 Kubernetes 负责 CRDs 和快照控制器的安装。  卷快照和卷快照内容的生命周期 VolumeSnapshotContents 是集群中的资源。VolumeSnapshots 是对于这些资源的请求。VolumeSnapshotContents 和 VolumeSnapshots 之间的交互遵循以下生命周期：</description>
    </item>
    
    <item>
      <title>CSI 卷克隆</title>
      <link>https://lijun.in/concepts/storage/volume-pvc-datasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/storage/volume-pvc-datasource/</guid>
      <description>本文档介绍 Kubernetes 中克隆现有 CSI 卷的概念。阅读前建议先熟悉卷。
介绍 glossary_tooltip text=&amp;quot;CSI&amp;rdquo; term_id=&amp;quot;csi&amp;rdquo; &amp;gt;}} 卷克隆功能增加了通过在 dataSource 字段中指定存在的 glossary_tooltip text=&amp;quot;PVC&amp;rdquo; term_id=&amp;quot;persistent-volume-claim&amp;rdquo; &amp;gt;}}s，来表示用户想要克隆的 glossary_tooltip term_id=&amp;quot;volume&amp;rdquo; &amp;gt;}}。
克隆，意思是为已有的 Kubernetes 卷创建副本，它可以像任何其它标准卷一样被使用。唯一的区别就是配置后，后端设备将创建指定完全相同的副本，而不是创建一个“新的”空卷。
从 Kubernetes API 的角度看，克隆的实现只是在创建新的 PVC 时，增加了指定一个现有 PVC 作为数据源的能力。源 PVC 必须是 bound 状态且可用的（不在使用中）。
用户在使用该功能时，需要注意以下事项：
 克隆支持（VolumePVCDataSource）仅适用于 CSI 驱动。 克隆支持仅适用于 动态供应器。 CSI 驱动可能实现，也可能未实现卷克隆功能。 仅当 PVC 与目标 PVC 存在于同一命名空间（源和目标 PVC 必须在相同的命名空间）时，才可以克隆 PVC。 仅在同一存储类中支持克隆。  目标卷必须和源卷具有相同的存储类 可以使用默认的存储类并且 storageClassName 字段在规格中忽略了   克隆只能在两个使用相同 VolumeMode 设置的卷中进行（如果请求克隆一个块存储模式的卷，源卷必须也是块存储模式）。  供应 克隆卷与其他任何 PVC 一样配置，除了需要增加 dataSource 来引用同一命名空间中现有的 PVC。</description>
    </item>
    
    <item>
      <title>Storage Classes</title>
      <link>https://lijun.in/concepts/storage/storage-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/storage/storage-classes/</guid>
      <description>本文描述了 Kubernetes 中 StorageClass 的概念。建议先熟悉 卷 和 持久卷 的概念。
介绍 StorageClass 为管理员提供了描述存储 &amp;ldquo;类&amp;rdquo; 的方法。 不同的类型可能会映射到不同的服务质量等级或备份策略，或是由集群管理员制定的任意策略。 Kubernetes 本身并不清楚各种类代表的什么。这个类的概念在其他存储系统中有时被称为 &amp;ldquo;配置文件&amp;rdquo;。
StorageClass 资源 每个 StorageClass 都包含 provisioner、parameters 和 reclaimPolicy 字段， 这些字段会在 StorageClass 需要动态分配 PersistentVolume 时会使用到。
StorageClass 对象的命名很重要，用户使用这个命名来请求生成一个特定的类。 当创建 StorageClass 对象时，管理员设置 StorageClass 对象的命名和其他参数，一旦创建了对象就不能再对其更新。
管理员可以为没有申请绑定到特定 StorageClass 的 PVC 指定一个默认的存储类 ： 更多详情请参阅 PersistentVolumeClaim 章节。
apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: standard provisioner: kubernetes.io/aws-ebs parameters: type: gp2 reclaimPolicy: Retain allowVolumeExpansion: true mountOptions: - debug volumeBindingMode: Immediate 存储分配器 每个 StorageClass 都有一个分配器，用来决定使用哪个卷插件分配 PV。该字段必须指定。</description>
    </item>
    
    <item>
      <title>卷快照类</title>
      <link>https://lijun.in/concepts/storage/volume-snapshot-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/storage/volume-snapshot-classes/</guid>
      <description>本文档描述了 Kubernetes 中 VolumeSnapshotClass 的概念。 建议熟悉卷快照（Volume Snapshots）和存储类（Storage Class）。
介绍 就像 StorageClass 为管理员提供了一种在配置卷时描述存储“类”的方法，VolumeSnapshotClass 提供了一种在配置卷快照时描述存储“类”的方法。
VolumeSnapshotClass 资源 每个 VolumeSnapshotClass 都包含 driver 、deletionPolicy 和 parameters 字段，当需要动态配置属于该类的 VolumeSnapshot 时使用。
VolumeSnapshotClass 对象的名称很重要，是用户可以请求特定类的方式。 管理员在首次创建 VolumeSnapshotClass 对象时设置类的名称和其他参数，对象一旦创建就无法更新。
管理员可以为不请求任何特定类绑定的 VolumeSnapshots 指定默认的 VolumeSnapshotClass。
apiVersion: snapshot.storage.k8s.io/v1beta1 kind: VolumeSnapshotClass metadata: name: csi-hostpath-snapclass driver: hostpath.csi.k8s.io deletionPolicy: Delete parameters: 驱动程序 卷快照类有一个驱动程序，用于确定配置 VolumeSnapshot 的 CSI 卷插件。 必须指定此字段。
删除策略 卷快照类具有 deletionPolicy 属性。用户可以配置当所绑定的 VolumeSnapshot 对象将被删除时，如何处理 VolumeSnapshotContent 对象。卷快照的这个策略可以是 Retain 或者 Delete。这个策略字段必须指定。
如果删除策略是 Delete，那么底层的存储快照会和 VolumeSnapshotContent 对象一起删除。如果删除策略是 Retain，那么底层快照和 VolumeSnapshotContent 对象都会被保留。</description>
    </item>
    
    <item>
      <title>动态卷供应</title>
      <link>https://lijun.in/concepts/storage/dynamic-provisioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/storage/dynamic-provisioning/</guid>
      <description>动态卷供应允许按需创建存储卷。 如果没有动态供应，集群管理员必须手动地联系他们的云或存储提供商来创建新的存储卷， 然后在 Kubernetes 集群创建 PersistentVolume 对象来表示这些卷。 动态供应功能消除了集群管理员预先配置存储的需要。 相反，它在用户请求时自动供应存储。
背景 动态卷供应的实现基于 storage.k8s.io API 组中的 StorageClass API 对象。 集群管理员可以根据需要定义多个 StorageClass 对象，每个对象指定一个卷插件（又名 provisioner）， 卷插件向卷供应商提供在创建卷时需要的数据卷信息及相关参数。
集群管理员可以在集群中定义和公开多种存储（来自相同或不同的存储系统），每种都具有自定义参数集。 该设计也确保终端用户不必担心存储供应的复杂性和细微差别，但仍然能够从多个存储选项中进行选择。
点击这里查阅有关存储类的更多信息。
启用动态卷供应 要启用动态供应功能，集群管理员需要为用户预先创建一个或多个 StorageClass 对象。 StorageClass 对象定义当动态供应被调用时，哪一个驱动将被使用和哪些参数将被传递给驱动。 以下清单创建了一个 StorageClass 存储类 &amp;ldquo;slow&amp;rdquo;，它提供类似标准磁盘的永久磁盘。
apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: slow provisioner: kubernetes.io/gce-pd parameters: type: pd-standard 以下清单创建了一个 &amp;ldquo;fast&amp;rdquo; 存储类，它提供类似 SSD 的永久磁盘。
apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: fast provisioner: kubernetes.io/gce-pd parameters: type: pd-ssd 使用动态卷供应 用户通过在 PersistentVolumeClaim 中包含存储类来请求动态供应的存储。 在 Kubernetes v1.</description>
    </item>
    
    <item>
      <title>特定于节点的卷数限制</title>
      <link>https://lijun.in/concepts/storage/storage-limits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/storage/storage-limits/</guid>
      <description>此页面描述了各个云供应商可关联至一个节点的最大卷数。
谷歌、亚马逊和微软等云供应商通常对可以关联到节点的卷数量进行限制。 Kubernetes 需要尊重这些限制。 否则，在节点上调度的 Pod 可能会卡住去等待卷的关联。
Kubernetes 的默认限制 The Kubernetes 调度器对关联于一个节点的卷数有默认限制：
自定义限制 您可以通过设置 KUBE_MAX_PD_VOLS 环境变量的值来设置这些限制，然后再启动调度器。 CSI 驱动程序可能具有不同的过程，关于如何自定义其限制请参阅相关文档。
如果设置的限制高于默认限制，请谨慎使用。请参阅云提供商的文档以确保节点可支持您设置的限制。
此限制应用于整个集群，所以它会影响所有节点。
动态卷限制 feature-state state=&amp;quot;stable&amp;rdquo; for_k8s_version=&amp;quot;v1.17&amp;rdquo; &amp;gt;}}
以下卷类型支持动态卷限制。
 Amazon EBS Google Persistent Disk Azure Disk CSI  对于由内建插件管理的卷，Kubernetes 会自动确定节点类型并确保节点上可关联的卷数目合规。 例如：
  在 Google Compute Engine环境中, 根据节点类型最多可以将127个卷关联到节点。
  对于 M5、C5、R5、T3 和 Z1D 类型实例的 Amazon EBS 磁盘，Kubernetes 仅允许 25 个卷关联到节点。 对于 ec2 上的其他实例类型 Amazon Elastic Compute Cloud (EC2), Kubernetes 允许 39 个卷关联至节点。</description>
    </item>
    
  </channel>
</rss>