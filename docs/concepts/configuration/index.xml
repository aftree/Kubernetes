<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😊 - 配置 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/concepts/configuration/</link>
    <description>Recent content in 😊 - 配置 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/concepts/configuration/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>扩展资源的资源箱打包</title>
      <link>https://lijun.in/concepts/configuration/resource-bin-packing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/configuration/resource-bin-packing/</guid>
      <description>for_k8s_version=&amp;quot;1.16&amp;rdquo; state=&amp;quot;alpha&amp;rdquo; &amp;gt;}}
可以将 kube-scheduler 配置为使用 RequestedToCapacityRatioResourceAllocation 优先级函数启用资源箱打包以及扩展资源。 优先级函数可用于根据自定义需求微调 kube-scheduler 。
使用 RequestedToCapacityRatioResourceAllocation 启用装箱 在 Kubernetes 1.15 之前，Kube-scheduler 用于允许根据主要资源，如 CPU 和内存对容量之比的请求对节点进行评分。 Kubernetes 1.16 在优先级函数中添加了一个新参数，该参数允许用户指定资源以及每个资源的权重，以便根据容量之比的请求为节点评分。 这允许用户通过使用适当的参数来打包扩展资源，从而提高了大型集群中稀缺资源的利用率。 RequestedToCapacityRatioResourceAllocation 优先级函数的行为可以通过名为 requestedToCapacityRatioArguments 的配置选项进行控制。 这个论证由两个参数 shape 和 resources 组成。 Shape 允许用户根据 utilization 和 score 值将功能调整为要求最少或要求最高的功能。 资源由 name 和 weight 组成，name 指定评分时要考虑的资源，weight 指定每种资源的权重。
以下是一个配置示例，该配置将 requestedToCapacityRatioArguments 设置为扩展资源 intel.com/foo 和 intel.com/bar 的装箱行为
{ &amp;#34;kind&amp;#34; : &amp;#34;Policy&amp;#34;, &amp;#34;apiVersion&amp;#34; : &amp;#34;v1&amp;#34;, ... &amp;#34;priorities&amp;#34; : [ ... { &amp;#34;name&amp;#34;: &amp;#34;RequestedToCapacityRatioPriority&amp;#34;, &amp;#34;weight&amp;#34;: 2, &amp;#34;argument&amp;#34;: { &amp;#34;requestedToCapacityRatioArguments&amp;#34;: { &amp;#34;shape&amp;#34;: [ {&amp;#34;utilization&amp;#34;: 0, &amp;#34;score&amp;#34;: 0}, {&amp;#34;utilization&amp;#34;: 100, &amp;#34;score&amp;#34;: 10} ], &amp;#34;resources&amp;#34;: [ {&amp;#34;name&amp;#34;: &amp;#34;intel.</description>
    </item>
    
    <item>
      <title>配置最佳实践</title>
      <link>https://lijun.in/concepts/configuration/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/configuration/overview/</guid>
      <description>本文档重点介绍并整合了整个用户指南、入门文档和示例中介绍的配置最佳实践。
这是一份活文件。 如果您认为某些内容不在此列表中但可能对其他人有用，请不要犹豫，提交问题或提交 PR。
一般配置提示  定义配置时，请指定最新的稳定 API 版本。   在推送到集群之前，配置文件应存储在版本控制中。 这允许您在必要时快速回滚配置更改。 它还有助于集群重新创建和恢复。   使用 YAML 而不是 JSON 编写配置文件。虽然这些格式几乎可以在所有场景中互换使用，但 YAML 往往更加用户友好。   只要有意义，就将相关对象分组到一个文件中。 一个文件通常比几个文件更容易管理。 请参阅[guestbook-all-in-one.yaml](https://github.com/kubernetes/examples/tree/param &amp;ldquo;githubbranch&amp;rdquo; &amp;gt;}}/guestbook/all-in-one/guestbook-all-in-one.yaml) 文件作为此语法的示例。   另请注意，可以在目录上调用许多kubectl命令。 例如，你可以在配置文件的目录中调用kubectl apply。   除非必要，否则不指定默认值：简单的最小配置会降低错误的可能性。   将对象描述放在注释中，以便更好地进行内省。  “Naked”Pods 与 ReplicaSet，Deployment 和 Jobs  如果您能避免，不要使用 naked Pods（即，Pod 未绑定到ReplicaSet 或Deployment）。 如果节点发生故障，将不会重新安排 Naked Pods。  Deployment，它创建一个 ReplicaSet 以确保所需数量的 Pod 始终可用，并指定替换 Pod 的策略(例如 RollingUpdate)，除了一些显式的restartPolicy: Never场景之外，几乎总是优先考虑直接创建 Pod。 Job 也可能是合适的。</description>
    </item>
    
    <item>
      <title>ConfigMap</title>
      <link>https://lijun.in/concepts/configuration/configmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/configuration/configmap/</guid>
      <description>n term_id=&amp;quot;configmap&amp;rdquo; length=&amp;quot;all&amp;rdquo; &amp;gt;}}
ConfigMap 并不提供保密或者加密功能。如果你想存储的数据是机密的，请使用 text=&amp;quot;Secret&amp;rdquo; term_id=&amp;quot;secret&amp;rdquo; &amp;gt;}} ，或者使用其他第三方工具来保证你的数据的私密性，而不是用 ConfigMap。
动机 使用 ConfigMap 来将你的配置数据和应用程序代码分开。
比如，假设你正在开发一个应用，它可以在你自己的电脑上（用于开发）和在云上（用于实际流量）运行。你的代码里有一段是用于查看环境变量 DATABASE_HOST，在本地运行时，你将这个变量设置为 localhost，在云上，你将其设置为引用 Kubernetes 集群中的公开数据库 text=&amp;quot;Service&amp;rdquo; term_id=&amp;quot;service&amp;rdquo; &amp;gt;}} 中的组件。
这让您可以获取在云中运行的容器镜像，并且如果有需要的话，在本地调试完全相同的代码。
ConfigMap 对象 ConfigMap 是一个 API 对象，让你可以存储其他对象所需要使用的配置。和其他 Kubernetes 对象都有一个 spec 不同的是，ConfigMap 使用 data 块来存储元素（键名）和它们的值。
ConfigMap 的名字必须是一个合法的 DNS 子域名。
ConfigMaps 和 Pods 您可以写一个引用 ConfigMap 的 Pod 的 spec，并根据 ConfigMap 中的数据在该 Pod 中配置容器。这个 Pod 和 ConfigMap 必须要在同一个 text=&amp;quot;命名空间&amp;rdquo; term_id=&amp;quot;namespace&amp;rdquo; &amp;gt;}} 中。
这是一个 ConfigMap 的示例，它的一些键只有一个值，其他键的值看起来像是配置的片段格式。
apiVersion: v1 kind: ConfigMap metadata: Name: game-demo data: # 类属性键；每一个键都映射到一个简单的值 player_initial_lives: 3 ui_properties_file_name: &amp;#34;user-interface.</description>
    </item>
    
    <item>
      <title>Pod 开销</title>
      <link>https://lijun.in/concepts/configuration/pod-overhead/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/configuration/pod-overhead/</guid>
      <description>for_k8s_version=&amp;quot;v1.18&amp;rdquo; state=&amp;quot;beta&amp;rdquo; &amp;gt;}}
在节点上运行 Pod 时，Pod 本身占用大量系统资源。这些资源是运行 Pod 内容器所需资源的附加资源。 POD 开销 是一个特性，用于计算 Pod 基础设施在容器请求和限制之上消耗的资源。
Pod 开销 在 Kubernetes 中，Pod 的开销是根据与 Pod 的 RuntimeClass 相关联的开销在 准入 时设置的。
当启用 Pod 开销时，在调度 Pod 时，除了考虑容器资源请求的总和外，还要考虑 Pod 开销。类似地，Kubelet 将在确定 Pod cgroup 的大小和执行 Pod 驱逐排序时包含 Pod 开销。
启用 Pod 开销 您需要确保在集群中启用了 PodOverhead 特性门（在 1.18 默认是开启的），以及一个用于定义 overhead 字段的 RuntimeClass。
使用示例 要使用 PodOverhead 特性，需要一个定义 overhead 字段的 RuntimeClass. 作为例子，可以在虚拟机和来宾操作系统中通过一个虚拟化容器运行时来定义 RuntimeClass 如下，其中每个 Pod 大约使用 120MiB:
--- kind: RuntimeClass apiVersion: node.k8s.io/v1beta1 metadata: name: kata-fc handler: kata-fc overhead: podFixed: memory: &amp;#34;120Mi&amp;#34; cpu: &amp;#34;250m&amp;#34; 通过指定 kata-fc RuntimeClass 处理程序创建的工作负载会将内存和 cpu 开销计入资源配额计算、节点调度以及 Pod cgroup 分级。</description>
    </item>
    
    <item>
      <title>为容器管理计算资源</title>
      <link>https://lijun.in/concepts/configuration/manage-compute-resources-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/configuration/manage-compute-resources-container/</guid>
      <description>当您定义 Pod 的时候可以选择为每个容器指定需要的 CPU 和内存（RAM）大小。当为容器指定了资源请求后，调度器就能够更好的判断出将容器调度到哪个节点上。如果您还为容器指定了资源限制，Kubernetes 就可以按照指定的方式来处理节点上的资源竞争。关于资源请求和限制的不同点和更多资料请参考 Resource QoS。
资源类型 CPU 和内存都是资源类型。资源类型具有基本单位。CPU 的单位是核心数，内存的单位是字节。
如果您使用的是 Kubernetes v1.14 或更高版本，则可以指定巨页资源。巨页是 Linux 特有的功能，节点内核在其中分配的内存块比默认页大小大得多。
例如，在默认页面大小为 4KiB 的系统上，您可以指定一个限制，hugepages-2Mi: 80Mi。如果容器尝试分配 40 个 2MiB 大页面（总共 80 MiB ），则分配失败。
您不能过量使用hugepages- *资源。 这与memory和cpu资源不同。
CPU和内存统称为计算资源，也可以称为资源。计算资源的数量是可以被请求、分配、消耗和可测量的。它们与 API 资源 不同。 API 资源（如 Pod 和 Service）是可通过 Kubernetes API server 读取和修改的对象。
Pod 和 容器的资源请求和限制 Pod 中的每个容器都可以指定以下的一个或者多个值：
 spec.containers[].resources.limits.cpu spec.containers[].resources.limits.memory spec.containers[].resources.requests.cpu spec.containers[].resources.requests.memory  尽管只能在个别容器上指定请求和限制，但是我们可以方便地计算出 Pod 资源请求和限制。特定资源类型的Pod 资源请求/限制是 Pod 中每个容器的该类型的资源请求/限制的总和。
CPU 的含义 CPU 资源的限制和请求以 cpu 为单位。
Kubernetes 中的一个 cpu 等于：</description>
    </item>
    
    <item>
      <title>Taint 和 Toleration</title>
      <link>https://lijun.in/concepts/configuration/taint-and-toleration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/configuration/taint-and-toleration/</guid>
      <description>节点亲和性（详见这里），是 pod 的一种属性（偏好或硬性要求），它使 pod 被吸引到一类特定的节点。Taint 则相反，它使 节点 能够 排斥 一类特定的 pod。
Taint 和 toleration 相互配合，可以用来避免 pod 被分配到不合适的节点上。每个节点上都可以应用一个或多个 taint ，这表示对于那些不能容忍这些 taint 的 pod，是不会被该节点接受的。如果将 toleration 应用于 pod 上，则表示这些 pod 可以（但不要求）被调度到具有匹配 taint 的节点上。
概念 您可以使用命令 kubectl taint 给节点增加一个 taint。比如，
kubectl taint nodes node1 key=value:NoSchedule 给节点 node1 增加一个 taint，它的 key 是 key，value 是 value，effect 是 NoSchedule。这表示只有拥有和这个 taint 相匹配的 toleration 的 pod 才能够被分配到 node1 这个节点。您可以在 PodSpec 中定义 pod 的 toleration。下面两个 toleration 均与上面例子中使用 kubectl taint 命令创建的 taint 相匹配，因此如果一个 pod 拥有其中的任何一个 toleration 都能够被分配到 node1 ：</description>
    </item>
    
    <item>
      <title>Secret</title>
      <link>https://lijun.in/concepts/configuration/secret/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/configuration/secret/</guid>
      <description>Secret 对象类型用来保存敏感信息，例如密码、OAuth 令牌和 ssh key。 将这些信息放在 secret 中比放在 term_id=&amp;quot;pod&amp;rdquo; &amp;gt;}} 的定义或者 text=&amp;quot;容器镜像&amp;rdquo; term_id=&amp;quot;image&amp;rdquo; &amp;gt;}} 中来说更加安全和灵活。 参阅 Secret 设计文档 获取更多详细信息。
Secret 概览 Secret 是一种包含少量敏感信息例如密码、token 或 key 的对象。这样的信息可能会被放在 Pod spec 中或者镜像中；将其放在一个 secret 对象中可以更好地控制它的用途，并降低意外暴露的风险。
用户可以创建 secret，同时系统也创建了一些 secret。
要使用 secret，pod 需要引用 secret。Pod 可以用两种方式使用 secret：作为 text=&amp;quot;volume&amp;rdquo; term_id=&amp;quot;volume&amp;rdquo; &amp;gt;}} 中的文件被挂载到 pod 中的一个或者多个容器里，或者当 kubelet 为 pod 拉取镜像时使用。
内置 secret Service Account 使用 API 凭证自动创建和附加 secret Kubernetes 自动创建包含访问 API 凭据的 secret，并自动修改您的 pod 以使用此类型的 secret。
如果需要，可以禁用或覆盖自动创建和使用 API 凭据。但是，如果您需要的只是安全地访问 apiserver，我们推荐这样的工作流程。</description>
    </item>
    
    <item>
      <title>将 Pod 分配给节点</title>
      <link>https://lijun.in/concepts/configuration/assign-pod-node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/configuration/assign-pod-node/</guid>
      <description>你可以约束一个 text=&amp;quot;Pod&amp;rdquo; term_id=&amp;quot;pod&amp;rdquo; &amp;gt;}} 只能在特定的 text=&amp;quot;Node(s)&amp;rdquo; term_id=&amp;quot;node&amp;rdquo; &amp;gt;}} 上运行，或者优先运行在特定的节点上。有几种方法可以实现这点，推荐的方法都是用标签选择器来进行选择。通常这样的约束不是必须的，因为调度器将自动进行合理的放置（比如，将 pod 分散到节点上，而不是将 pod 放置在可用资源不足的节点上等等），但在某些情况下，你可以需要更多控制 pod 停靠的节点，例如，确保 pod 最终落在连接了 SSD 的机器上，或者将来自两个不同的服务且有大量通信的 pod 放置在同一个可用区。
nodeSelector nodeSelector 是节点选择约束的最简单推荐形式。nodeSelector 是 PodSpec 的一个字段。它指定键值对的映射。为了使 pod 可以在节点上运行，节点必须具有每个指定的键值对作为标签（它也可以具有其他标签）。最常用的是一对键值对。
让我们来看一个使用 nodeSelector 的例子。
步骤零：先决条件 本示例假设你已基本了解 Kubernetes 的 pod 并且已经建立一个 Kubernetes 集群。
步骤一：添加标签到节点 执行 kubectl get nodes 命令获取集群的节点名称。选择一个你要增加标签的节点，然后执行 kubectl label nodes &amp;lt;node-name&amp;gt; &amp;lt;label-key&amp;gt;=&amp;lt;label-value&amp;gt; 命令将标签添加到你所选择的节点上。例如，如果你的节点名称为 &amp;lsquo;kubernetes-foo-node-1.c.a-robinson.internal&amp;rsquo; 并且想要的标签是 &amp;lsquo;disktype=ssd&amp;rsquo;，则可以执行 kubectl label nodes kubernetes-foo-node-1.c.a-robinson.internal disktype=ssd 命令。
你可以通过重新运行 kubectl get nodes --show-labels 并且查看节点当前具有了一个标签来验证它是否有效。你也可以使用 kubectl describe node &amp;quot;nodename&amp;quot; 命令查看指定节点的标签完整列表。</description>
    </item>
    
    <item>
      <title>使用 kubeconfig 文件组织集群访问</title>
      <link>https://lijun.in/concepts/configuration/organize-cluster-access-kubeconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/configuration/organize-cluster-access-kubeconfig/</guid>
      <description>使用 kubeconfig 文件来组织有关集群、用户、命名空间和身份认证机制的信息。kubectl 命令行工具使用 kubeconfig 文件来查找选择集群所需的信息，并与集群的 API 服务器进行通信。
用于配置集群访问的文件称为 kubeconfig 文件。这是引用配置文件的通用方法。这并不意味着有一个名为 kubeconfig 的文件
默认情况下，kubectl 在 $HOME/.kube 目录下查找名为 config 的文件。您可以通过设置 KUBECONFIG 环境变量或者设置--kubeconfig参数来指定其他 kubeconfig 文件。
有关创建和指定 kubeconfig 文件的分步说明，请参阅配置对多集群的访问。
支持多集群、用户和身份认证机制 假设您有多个集群，并且您的用户和组件以多种方式进行身份认证。比如：
 正在运行的 kubelet 可能使用证书在进行认证。 用户可能通过令牌进行认证。 管理员可能拥有多个证书集合提供给各用户。  使用 kubeconfig 文件，您可以组织集群、用户和命名空间。您还可以定义上下文，以便在集群和命名空间之间快速轻松地切换。
上下文（Context） 通过 kubeconfig 文件中的 context 元素，使用简便的名称来对访问参数进行分组。每个上下文都有三个参数：cluster、namespace 和 user。默认情况下，kubectl 命令行工具使用 当前上下文 中的参数与集群进行通信。
选择当前上下文
kubectl config use-context KUBECONFIG 环境变量 KUBECONFIG 环境变量包含一个 kubeconfig 文件列表。对于 Linux 和 Mac，列表以冒号分隔。对于 Windows，列表以分号分隔。KUBECONFIG 环境变量不是必要的。如果 KUBECONFIG 环境变量不存在，kubectl 使用默认的 kubeconfig 文件，$HOME/.kube/config。
如果 KUBECONFIG 环境变量存在，kubectl 使用 KUBECONFIG 环境变量中列举的文件合并后的有效配置。</description>
    </item>
    
  </channel>
</rss>