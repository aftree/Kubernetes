<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pods on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/concepts/workloads/pods/</link>
    <description>Recent content in Pods on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/concepts/workloads/pods/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pod 概览</title>
      <link>https://lijun.in/concepts/workloads/pods/pod-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/workloads/pods/pod-overview/</guid>
      <description>本节提供了 Pod 的概览信息，Pod 是最小可部署的 Kubernetes 对象模型。
理解 Pod Pod 是 Kubernetes 应用程序的基本执行单元，即它是 Kubernetes 对象模型中创建或部署的最小和最简单的单元。Pod 表示在 glossary_tooltip term_id=&amp;quot;cluster&amp;rdquo; &amp;gt;}} 上运行的进程。
Pod 封装了应用程序容器（或者在某些情况下封装多个容器）、存储资源、唯一网络 IP 以及控制容器应该如何运行的选项。 Pod 表示部署单元：Kubernetes 中应用程序的单个实例，它可能由单个glossary_tooltip text=&amp;quot;容器&amp;rdquo; term_id=&amp;quot;container&amp;rdquo; &amp;gt;}} 或少量紧密耦合并共享资源的容器组成。
Docker 是 Kubernetes Pod 中最常用的容器运行时，但 Pod 也能支持其他的容器运行时。
Kubernetes 集群中的 Pod 可被用于以下两个主要用途：
 运行单个容器的 Pod。&amp;ldquo;每个 Pod 一个容器&amp;quot;模型是最常见的 Kubernetes 用例；在这种情况下，可以将 Pod 看作单个容器的包装器，并且 Kubernetes 直接管理 Pod，而不是容器。 运行多个协同工作的容器的 Pod。 Pod 可能封装由多个紧密耦合且需要共享资源的共处容器组成的应用程序。 这些位于同一位置的容器可能形成单个内聚的服务单元 —— 一个容器将文件从共享卷提供给公众，而另一个单独的“挂斗”（sidecar）容器则刷新或更新这些文件。 Pod 将这些容器和存储资源打包为一个可管理的实体。 Kubernetes 博客 上有一些其他的 Pod 用例信息。更多信息请参考：   分布式系统工具包：容器组合的模式 容器设计模式  每个 Pod 表示运行给定应用程序的单个实例。如果希望横向扩展应用程序（例如，运行多个实例），则应该使用多个 Pod，每个应用实例使用一个 Pod 。在 Kubernetes 中，这通常被称为 副本。通常使用一个称为控制器的抽象来创建和管理一组副本 Pod。更多信息请参见 Pod 和控制器。</description>
    </item>
    
    <item>
      <title>Pods</title>
      <link>https://lijun.in/concepts/workloads/pods/pod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/workloads/pods/pod/</guid>
      <description>Pod 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。
Pod 是什么？ Pod （就像在鲸鱼荚或者豌豆荚中）是一组（一个或多个） glossary_tooltip text=&amp;quot;容器&amp;rdquo; term_id=&amp;quot;container&amp;rdquo; &amp;gt;}}（例如 Docker 容器），这些容器共享存储、网络、以及怎样运行这些容器的声明。Pod 中的内容总是并置（colocated）的并且一同调度，在共享的上下文中运行。 Pod 所建模的是特定于应用的“逻辑主机”，其中包含一个或多个应用容器，这些容器是相对紧密的耦合在一起 — 在容器出现之前，在相同的物理机或虚拟机上运行意味着在相同的逻辑主机上运行。
虽然 Kubernetes 支持多种容器运行时，但 Docker 是最常见的一种运行时，它有助于使用 Docker 术语来描述 Pod。
Pod 的共享上下文是一组 Linux 命名空间、cgroups、以及其他潜在的资源隔离相关的因素，这些相同的东西也隔离了 Docker 容器。在 Pod 的上下文中，单个应用程序可能还会应用进一步的子隔离。
Pod 中的所有容器共享一个 IP 地址和端口空间，并且可以通过 localhost 互相发现。他们也能通过标准的进程间通信（如 SystemV 信号量或 POSIX 共享内存）方式进行互相通信。不同 Pod 中的容器的 IP 地址互不相同，没有 特殊配置 就不能使用 IPC 进行通信。这些容器之间经常通过 Pod IP 地址进行通信。
Pod 中的应用也能访问共享 glossary_tooltip text=&amp;quot;卷&amp;rdquo; term_id=&amp;quot;volume&amp;rdquo; &amp;gt;}}，共享卷是 Pod 定义的一部分，可被用来挂载到每个应用的文件系统上。
在 Docker 体系的术语中，Pod 被建模为一组具有共享命名空间和共享文件系统卷 的 Docker 容器。</description>
    </item>
    
    <item>
      <title>Pod Preset</title>
      <link>https://lijun.in/concepts/workloads/pods/podpreset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/workloads/pods/podpreset/</guid>
      <description>本文提供了 PodPreset 的概述。 在 Pod 创建时，用户可以使用 PodPreset 对象将特定信息注入 Pod 中，这些信息可以包括 secret、 卷、卷挂载和环境变量。
理解 Pod Preset Pod Preset 是一种 API 资源，在 Pod 创建时，用户可以用它将额外的运行时需求信息注入 Pod。 使用标签选择器（label selector）来指定 Pod Preset 所适用的 Pod。
使用 Pod Preset 使得 Pod 模板编写者不必显式地为每个 Pod 设置信息。 这样，使用特定服务的 Pod 模板编写者不需要了解该服务的所有细节。
了解更多的相关背景信息，请参考 PodPreset 设计提案。
PodPreset 如何工作 Kubernetes 提供了准入控制器 (PodPreset)，该控制器被启用时，会将 Pod Preset 应用于接收到的 Pod 创建请求中。 当出现 Pod 创建请求时，系统会执行以下操作：
 检索所有可用 PodPresets 。 检查 PodPreset 的标签选择器与要创建的 Pod 的标签是否匹配。 尝试合并 PodPreset 中定义的各种资源，并注入要创建的 Pod。 发生错误时抛出事件，该事件记录了 pod 信息合并错误，同时在 不注入 PodPreset 信息的情况下创建 Pod。 为改动的 Pod spec 添加注解，来表明它被 PodPreset 所修改。 注解形如： podpreset.</description>
    </item>
    
    <item>
      <title>Pod 拓扑扩展约束</title>
      <link>https://lijun.in/concepts/workloads/pods/pod-topology-spread-constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/workloads/pods/pod-topology-spread-constraints/</guid>
      <description>feature-state for_k8s_version=&amp;quot;v1.16&amp;rdquo; state=&amp;quot;alpha&amp;rdquo; &amp;gt;}}
可以使用拓扑扩展约束来控制glossary_tooltip text=&amp;quot;Pods&amp;rdquo; term_id=&amp;quot;Pod&amp;rdquo; &amp;gt;}} 在集群内故障域（例如地区，区域，节点和其他用户自定义拓扑域）之间的分布。这可以帮助实现高可用以及提升资源利用率。
先决条件 启用功能 确保 EvenPodsSpread 功能已开启（在 1.16 版本中该功能默认关闭）。阅读功能选项了解如何开启该功能。EvenPodsSpread 必须在 glossary_tooltip text=&amp;quot;API Server&amp;rdquo; term_id=&amp;quot;kube-apiserver&amp;rdquo; &amp;gt;}} 和 glossary_tooltip text=&amp;quot;scheduler&amp;rdquo; term_id=&amp;quot;kube-scheduler&amp;rdquo; &amp;gt;}} 中都要开启。
节点标签 拓扑扩展约束依赖于节点标签来标识每个节点所在的拓扑域。例如，一个节点可能具有标签：node=node1,zone=us-east-1a,region=us-east-1
假设你拥有一个具有以下标签的 4 节点集群：
NAME STATUS ROLES AGE VERSION LABELS node1 Ready &amp;lt;none&amp;gt; 4m26s v1.16.0 node=node1,zone=zoneA node2 Ready &amp;lt;none&amp;gt; 3m58s v1.16.0 node=node2,zone=zoneA node3 Ready &amp;lt;none&amp;gt; 3m17s v1.16.0 node=node3,zone=zoneB node4 Ready &amp;lt;none&amp;gt; 2m43s v1.16.0 node=node4,zone=zoneB 然后从逻辑上看集群如下：
+---------------+---------------+ | zoneA | zoneB | +-------+-------+-------+-------+ | node1 | node2 | node3 | node4 | +-------+-------+-------+-------+ 可以复用在大多数集群上自动创建和填充的知名标签，而不是手动添加标签。</description>
    </item>
    
    <item>
      <title>干扰</title>
      <link>https://lijun.in/concepts/workloads/pods/disruptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/workloads/pods/disruptions/</guid>
      <description>本指南针对的是希望构建高可用性应用程序的应用所有者，他们有必要了解可能发生在 pod 上的干扰类型。
文档同样适用于想要执行自动化集群操作（例如升级和自动扩展集群）的集群管理员。
自愿干扰和非自愿干扰 Pod 不会消失，除非有人（用户或控制器）将其销毁，或者出现了不可避免的硬件或软件系统错误。
我们把这些不可避免的情况称为应用的非自愿干扰。例如：
 节点下层物理机的硬件故障 集群管理员错误地删除虚拟机（实例） 云提供商或虚拟机管理程序中的故障导致的虚拟机消失 内核错误 节点由于集群网络隔离从集群中消失 由于节点资源不足导致 pod 被驱逐。  除了资源不足的情况，大多数用户应该都熟悉这些情况；它们不是特定于 Kubernetes 的。
我们称其他情况为自愿干扰。包括由应用程序所有者发起的操作和由集群管理员发起的操作。典型的应用程序所有者的 作包括：
 删除 deployment 或其他管理 pod 的控制器 更新了 deployment 的 pod 模板导致 pod 重启 直接删除 pod（例如，因为误操作）  集群管理员操作包括：
 排空（drain）节点进行修复或升级。 从集群中排空节点以缩小集群（了解集群自动扩缩）。 从节点中移除一个 pod，以允许其他 pod 使用该节点。  这些操作可能由集群管理员直接执行，也可能由集群管理员所使用的自动化工具执行，或者由集群托管提供商自动执行。
咨询集群管理员或联系云提供商，或者查询发布文档，以确定是否为集群启用了任何资源干扰源。如果没有启用，可以不用创建 Pod Disruption Budgets（Pod 干扰预算）
并非所有的自愿干扰都会受到 pod 干扰预算的限制。例如，删除 deployment 或 pod 的删除操作就会跳过 pod 干扰预算检查。
处理干扰 以下是减轻非自愿干扰的一些方法：
 确保 pod请求所需资源。 如果需要更高的可用性，请复制应用程序。（了解有关运行多副本的无状态和有状态应用程序的信息。） 为了在运行复制应用程序时获得更高的可用性，请跨机架（使用反亲和性）或跨区域（如果使用多区域集群）扩展应用程序。  自愿干扰的频率各不相同。在一个基本的 Kubernetes 集群中，根本没有自愿干扰。然而，集群管理 或托管提供商可能运行一些可能导致自愿干扰的额外服务。例如，节点软 更新可能导致自愿干扰。另外，集群（节点）自动缩放的某些 现可能导致碎片整理和紧缩节点的自愿干扰。集群 理员或托管提供商应该已经记录了各级别的自愿干扰（如果有的话）。</description>
    </item>
    
    <item>
      <title>临时容器</title>
      <link>https://lijun.in/concepts/workloads/pods/ephemeral-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/workloads/pods/ephemeral-containers/</guid>
      <description>feature-state state=&amp;quot;alpha&amp;rdquo; for_k8s_version=&amp;quot;v1.16&amp;rdquo; &amp;gt;}}
此页面概述了临时容器：一种特殊的容器，该容器在现有 glossary_tooltip term_id=&amp;quot;pod&amp;rdquo; &amp;gt;}} 中临时运行，为了完成用户启动的操作，例如故障排查。使用临时容器来检查服务，而不是构建应用程序。
临时容器处于早期的 alpha 阶段，不适用于生产环境集群。应该预料到临时容器在某些情况下不起作用，例如在定位容器的命名空间时。根据 Kubernetes 弃用政策，该 alpha 功能将来可能发生重大变化或完全删除。
了解临时容器 glossary_tooltip text=&amp;quot;Pods&amp;rdquo; term_id=&amp;quot;pod&amp;rdquo; &amp;gt;}} 是 Kubernetes 应用程序的基本构建块。由于 pod 是一次性且可替换的，因此一旦 Pod 创建，就无法将容器加入到 Pod 中。取而代之的是，通常使用 glossary_tooltip text=&amp;quot;deployments&amp;rdquo; term_id=&amp;quot;deployment&amp;rdquo; &amp;gt;}} 以受控的方式来删除并替换 Pod。
有时有必要检查现有 Pod 的状态，例如，对于难以复现的故障进行排查。在这些场景中，可以在现有 Pod 中运行临时容器来检查其状态并运行任意命令。
什么是临时容器？ 临时容器与其他容器的不同之处在于，它们缺少对资源或执行的保证，并且永远不会自动重启，因此不适用于构建应用程序。临时容器使用与常规容器相同的 ContainerSpec 段进行描述，但许多字段是不相容且不允许的。
 临时容器没有端口配置，因此像 ports，livenessProbe，readinessProbe 这样的字段是不允许的。 Pod 资源分配是不可变的，因此 resources 配置是不允许的。 有关允许字段的完整列表，请参见[临时容器参考文档](/docs/reference/generated/kubernetes-api/&amp;lt; param &amp;ldquo;version&amp;rdquo; &amp;gt;}}/#ephemeralcontainer-v1-core)。  临时容器是使用 API 中的一种特殊的 ephemeralcontainers 处理器进行创建的，而不是直接添加到 pod.spec 段，因此无法使用 kubectl edit 来添加一个临时容器。
与常规容器一样，将临时容器添加到 Pod 后，将不能更改或删除临时容器。</description>
    </item>
    
    <item>
      <title>Init 容器</title>
      <link>https://lijun.in/concepts/workloads/pods/init-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/workloads/pods/init-containers/</guid>
      <description>本页提供了 Init 容器的概览，它是一种专用的容器，在glossary_tooltip text=&amp;quot;Pod&amp;rdquo; term_id=&amp;quot;pod&amp;rdquo; &amp;gt;}}内的应用容器启动之前运行，并包括一些应用镜像中不存在的实用工具和安装脚本。
你可以在Pod的规格信息中与containers数组同级的位置指定 Init 容器。
理解 Init 容器 glossary_tooltip text=&amp;quot;Pod&amp;rdquo; term_id=&amp;quot;pod&amp;rdquo; &amp;gt;}} 可以包含多个容器，应用运行在这些容器里面，同时 Pod 也可以有一个或多个先于应用容器启动的 Init 容器。
Init 容器与普通的容器非常像，除了如下两点：
 它们总是运行到完成。 每个都必须在下一个启动之前成功完成。  如果 Pod 的 Init 容器失败，Kubernetes 会不断地重启该 Pod，直到 Init 容器成功为止。然而，如果 Pod 对应的 restartPolicy 值为 Never，它不会重新启动。
指定容器为 Init 容器，需要在 Pod 的 spec 中添加 initContainers 字段， 该字段內以[Container](/docs/reference/generated/kubernetes-api/&amp;lt; param &amp;ldquo;version&amp;rdquo; &amp;gt;}}/#container-v1-core) 类型对象数组的形式组织，和应用的 containers 数组同级相邻。 Init 容器的状态在 status.initContainerStatuses 字段中以容器状态数组的格式返回（类似 status.containerStatuses 字段）。
与普通容器的不同之处 Init 容器支持应用容器的全部字段和特性，包括资源限制、数据卷和安全设置。 然而，Init 容器对资源请求和限制的处理稍有不同，在下面 资源 处有说明。</description>
    </item>
    
    <item>
      <title>Pod 的生命周期</title>
      <link>https://lijun.in/concepts/workloads/pods/pod-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/workloads/pods/pod-lifecycle/</guid>
      <description>该页面将描述 Pod 的生命周期。
Pod phase Pod 的 status 定义在 PodStatus 对象中，其中有一个 phase 字段。
Pod 的运行阶段（phase）是 Pod 在其生命周期中的简单宏观概述。该阶段并不是对容器或 Pod 的综合汇总，也不是为了做为综合状态机。
Pod 相位的数量和含义是严格指定的。除了本文档中列举的内容外，不应该再假定 Pod 有其他的 phase 值。
下面是 phase 可能的值：
 挂起（Pending）：Pod 已被 Kubernetes 系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度 Pod 的时间和通过网络下载镜像的时间，这可能需要花点时间。 运行中（Running）：该 Pod 已经绑定到了一个节点上，Pod 中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态。 成功（Succeeded）：Pod 中的所有容器都被成功终止，并且不会再重启。 失败（Failed）：Pod 中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止。 未知（Unknown）：因为某些原因无法取得 Pod 的状态，通常是因为与 Pod 所在主机通信失败。  Pod 状态 Pod 有一个 PodStatus 对象，其中包含一个 PodCondition 数组。 PodCondition 数组的每个元素都有一个 type 字段和一个 status 字段。type 字段是字符串，可能的值有 PodScheduled、Ready、Initialized 和 Unschedulable。status 字段是一个字符串，可能的值有 True、False 和 Unknown。</description>
    </item>
    
  </channel>
</rss>