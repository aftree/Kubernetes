<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>使用 Kubernetes 对象 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/concepts/overview/working-with-objects/</link>
    <description>Recent content in 使用 Kubernetes 对象 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/concepts/overview/working-with-objects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解 Kubernetes 对象</title>
      <link>https://lijun.in/concepts/overview/working-with-objects/kubernetes-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/overview/working-with-objects/kubernetes-objects/</guid>
      <description>本页说明了 Kubernetes 对象在 Kubernetes API 中是如何表示的，以及如何在 .yaml 格式的文件中表示。
理解 Kubernetes 对象 在 Kubernetes 系统中，Kubernetes 对象 是持久化的实体。Kubernetes 使用这些实体去表示整个集群的状态。特别地，它们描述了如下信息：
 哪些容器化应用在运行（以及在哪个 Node 上） 可以被应用使用的资源 关于应用运行时表现的策略，比如重启策略、升级策略，以及容错策略  Kubernetes 对象是 “目标性记录” —— 一旦创建对象，Kubernetes 系统将持续工作以确保对象存在。通过创建对象，本质上是在告知 Kubernetes 系统，所需要的集群工作负载看起来是什么样子的，这就是 Kubernetes 集群的 期望状态（Desired State）。
操作 Kubernetes 对象 —— 无论是创建、修改，或者删除 —— 需要使用 Kubernetes API。比如，当使用 kubectl 命令行接口时，CLI 会执行必要的 Kubernetes API 调用，也可以在程序中使用 客户端库 直接调用 Kubernetes API。
对象规约（Spec）与状态（Status） 每个 Kubernetes 对象包含两个嵌套的对象字段，它们负责管理对象的配置：对象 spec 和 对象 status 。 spec 是必需的，它描述了对象的 期望状态（Desired State） —— 希望对象所具有的特征。 status 描述了对象的 实际状态（Actual State） ，它是由 Kubernetes 系统提供和更新的。在任何时刻，Kubernetes 控制面一直努力地管理着对象的实际状态以与期望状态相匹配。</description>
    </item>
    
    <item>
      <title>Kubernetes 对象管理</title>
      <link>https://lijun.in/concepts/overview/working-with-objects/object-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/overview/working-with-objects/object-management/</guid>
      <description>kubectl 命令行工具支持多种不同的方式来创建和管理 Kubernetes 对象。本文档概述了不同的方法。阅读 Kubectl book 来了解 kubectl 管理对象的详细信息。
管理技巧 应该只使用一种技术来管理 Kubernetes 对象。混合和匹配技术作用在同一对象上将导致未定义行为。
   Management technique Operates on Recommended environment Supported writers Learning curve     Imperative commands Live objects Development projects 1+ Lowest   Imperative object configuration Individual files Production projects 1 Moderate   Declarative object configuration Directories of files Production projects 1+ Highest    命令式命令 使用命令式命令时，用户可以在集群中的活动对象上进行操作。用户将操作传给 kubectl 命令作为参数或标志。
这是开始或者在集群中运行一次性任务的最简单方法。因为这个技术直接在活动对象上操作，所以它不提供以前配置的历史记录。
例子 通过创建 Deployment 对象来运行 nginx 容器的实例：</description>
    </item>
    
    <item>
      <title>对象名称和IDs</title>
      <link>https://lijun.in/concepts/overview/working-with-objects/names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/overview/working-with-objects/names/</guid>
      <description>集群中的每一个对象都一个名称 来标识在同类资源中的唯一性。
每个 Kubernetes 对象也有一个UID 来标识在整个集群中的唯一性。
比如，在同一个namespace中只能命名一个名为 myapp-1234 的 Pod, 但是可以命名一个 Pod 和一个 Deployment 同为 myapp-1234.
对于非唯一的用户提供的属性，Kubernetes 提供了标签和注释。
有关名称和 UID 的精确语法规则，请参见标识符设计文档。
名称 term_id=&amp;quot;name&amp;rdquo; length=&amp;quot;all&amp;rdquo; &amp;gt;}}
以下是比较常见的三种资源命名约束。
DNS 子域名 某些资源类型需要一个 name 来作为一个 DNS 子域名，见定义 RFC 1123。也就是命名必须满足如下规则：
 不能超过253个字符 只能包含字母数字，以及&amp;rsquo;-&amp;rsquo; 和 &amp;lsquo;.&amp;rsquo; 须以字母数字开头 须以字母数字结尾  DNS 标签名称 某些资源类型需要其名称遵循 DNS 标签的标准，见RFC 1123。也就是命名必须满足如下规则：
 最多63个字符 只能包含字母数字，以及&amp;rsquo;-&amp;rsquo; 须以字母数字开头 须以字母数字结尾  Path 部分名称 一些用与 Path 部分的资源类型要求名称能被安全的 encode。换句话说，其名称不能含有这些字符 &amp;ldquo;.&amp;quot;、&amp;rdquo;..&amp;quot;、&amp;quot;/&amp;ldquo;或&amp;rdquo;%&amp;quot;。
下面是一个名为nginx-demo的 Pod 的配置清单：
apiVersion: v1 kind: Pod metadata: name: nginx-demo spec: containers: - name: nginx image: nginx:1.</description>
    </item>
    
    <item>
      <title>命名空间</title>
      <link>https://lijun.in/concepts/overview/working-with-objects/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/overview/working-with-objects/namespaces/</guid>
      <description>Kubernetes 支持多个虚拟集群，它们底层依赖于同一个物理集群。 这些虚拟集群被称为命名空间。
何时使用多个命名空间 命名空间适用于存在很多跨多个团队或项目的用户的场景。对于只有几到几十个用户的集群，根本不需要创建或考虑命名空间。当需要名称空间提供的功能时，请开始使用它们。
命名空间为名称提供了一个范围。资源的名称需要在命名空间内是唯一的，但不能跨命名空间。命名空间不能相互嵌套，每个 Kubernetes 资源只能在一个命名空间中。
命名空间是在多个用户之间划分集群资源的一种方法（通过资源配额）。
在 Kubernetes 未来版本中，相同命名空间中的对象默认将具有相同的访问控制策略。
不需要使用多个命名空间来分隔轻微不同的资源，例如同一软件的不同版本：使用 labels 来区分同一命名空间中的不同资源。
使用命名空间 命名空间的创建和删除已在命名空间的管理指南文档中进行了描述。
查看命名空间 您可以使用以下命令列出集群中现存的命名空间：
kubectl get namespace NAME STATUS AGE default Active 1d kube-system Active 1d kube-public Active 1d Kubernetes 会创建三个初始命名空间：
 default 没有指明使用其它命名空间的对象所使用的默认命名空间  kube-system The namespace for objects created by the Kubernetes system &amp;ndash;&amp;gt; kube-system Kubernetes 系统创建对象所使用的命名空间  kube-public This namespace is created automatically and is readable by all users (including those not authenticated).</description>
    </item>
    
    <item>
      <title>标签和选择器</title>
      <link>https://lijun.in/concepts/overview/working-with-objects/labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/overview/working-with-objects/labels/</guid>
      <description>标签 是附加到 Kubernetes 对象（比如 Pods）上的键值对。 标签旨在用于指定对用户有意义且相关的对象的标识属性，但不直接对核心系统有语义含义。 标签可以用于组织和选择对象的子集。标签可以在创建时附加到对象，随后可以随时添加和修改。 每个对象都可以定义一组键/值标签。每个键对于给定对象必须是唯一的。
&amp;#34;metadata&amp;#34;: { &amp;#34;labels&amp;#34;: { &amp;#34;key1&amp;#34; : &amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34; : &amp;#34;value2&amp;#34; } } 我们最终将标签索引和反向索引，用于高效查询和监视，使用它们在 UI 和 CLI 中进行排序和分组等。我们不希望将非标识性的、尤其是大型或结构化数据用作标签，给后者带来污染。应使用 注解 记录非识别信息
动机 标签使用户能够以松散耦合的方式将他们自己的组织结构映射到系统对象，而无需客户端存储这些映射。
服务部署和批处理流水线通常是多维实体（例如，多个分区或部署、多个发行序列、多个层，每层多个微服务）。管理通常需要交叉操作，这打破了严格的层次表示的封装，特别是由基础设施而不是用户确定的严格的层次结构。
示例标签：
 &amp;quot;release&amp;quot; : &amp;quot;stable&amp;quot;, &amp;quot;release&amp;quot; : &amp;quot;canary&amp;quot; &amp;quot;environment&amp;quot; : &amp;quot;dev&amp;quot;, &amp;quot;environment&amp;quot; : &amp;quot;qa&amp;quot;, &amp;quot;environment&amp;quot; : &amp;quot;production&amp;quot; &amp;quot;tier&amp;quot; : &amp;quot;frontend&amp;quot;, &amp;quot;tier&amp;quot; : &amp;quot;backend&amp;quot;, &amp;quot;tier&amp;quot; : &amp;quot;cache&amp;quot; &amp;quot;partition&amp;quot; : &amp;quot;customerA&amp;quot;, &amp;quot;partition&amp;quot; : &amp;quot;customerB&amp;quot; &amp;quot;track&amp;quot; : &amp;quot;daily&amp;quot;, &amp;quot;track&amp;quot; : &amp;quot;weekly&amp;quot;  这些只是常用标签的例子; 您可以任意制定自己的约定。请记住，对于给定对象标签的键必须是唯一的。</description>
    </item>
    
    <item>
      <title>注解</title>
      <link>https://lijun.in/concepts/overview/working-with-objects/annotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/overview/working-with-objects/annotations/</guid>
      <description>你可以使用 Kubernetes 注解为对象附加任意的非标识的元数据。客户端程序（例如工具和库）能够获取这些元数据信息。
为对象附加元数据 您可以使用标签或注解将元数据附加到 Kubernetes 对象。 标签可以用来选择对象和查找满足某些条件的对象集合。 相反，注解不用于标识和选择对象。 注解中的元数据，可以很小，也可以很大，可以是结构化的，也可以是非结构化的，能够包含标签不允许的字符。
注解和标签一样，是键/值对:
&amp;#34;metadata&amp;#34;: { &amp;#34;annotations&amp;#34;: { &amp;#34;key1&amp;#34; : &amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34; : &amp;#34;value2&amp;#34; } } 以下是一些例子，用来说明哪些信息可以使用注解来记录:
 由声明性配置所管理的字段。 将这些字段附加为注解，能够将它们与客户端或服务端设置的默认值、自动生成的字段以及通过自动调整大小或自动伸缩系统设置的字段区分开来。   构建、发布或镜像信息（如时间戳、发布 ID、Git 分支、PR 数量、镜像哈希、仓库地址）。   指向日志记录、监控、分析或审计仓库的指针。   可用于调试目的的客户端库或工具信息：例如，名称、版本和构建信息。   用户或者工具/系统的来源信息，例如来自其他生态系统组件的相关对象的 URL。   推出的轻量级工具的元数据信息：例如，配置或检查点。   负责人员的电话或呼机号码，或指定在何处可以找到该信息的目录条目，如团队网站。  从用户到最终运行的指令，以修改行为或使用非标准功能。
您可以将这类信息存储在外部数据库或目录中而不使用注解，但这样做就使得开发人员很难生成用于部署、管理、自检的客户端共享库和工具。
语法和字符集 注解 存储的形式是键/值对。有效的注解键分为两部分：可选的前缀和名称，以斜杠（/）分隔。 名称段是必需项，并且必须在63个字符以内，以字母数字字符（[a-z0-9A-Z]）开头和结尾，并允许使用破折号（-），下划线（_），点（.）和字母数字。 前缀是可选的。 如果指定，则前缀必须是DNS子域：一系列由点（.）分隔的DNS标签，总计不超过253个字符，后跟斜杠（/）。 如果省略前缀，则假定注释键对用户是私有的。 由系统组件添加的注释（例如，kube-scheduler，kube-controller-manager，kube-apiserver，kubectl 或其他第三方组件），必须为终端用户添加注释前缀。
kubernetes.io / 和 k8s.io / 前缀是为Kubernetes核心组件保留的。
例如，这是Pod的配置文件，其注释为 imageregistry：https：// hub.docker.com / ：</description>
    </item>
    
    <item>
      <title>字段选择器</title>
      <link>https://lijun.in/concepts/overview/working-with-objects/field-selectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/overview/working-with-objects/field-selectors/</guid>
      <description>字段选择器（Field selectors）允许您根据一个或多个资源字段的值筛选 Kubernetes 资源。 下面是一些使用字段选择器查询的例子：
 metadata.name=my-service metadata.namespace!=default status.phase=Pending  下面这个 kubectl 命令将筛选出 status.phase 字段值为 Running 的所有 Pod：
kubectl get pods --field-selector status.phase=Running 字段选择器本质上是资源过滤器。默认情况下，字段选择器/过滤器是未被应用的，这意味着指定类型的所有资源都会被筛选出来。 这使得以下的两个 kubectl 查询是等价的：
kubectl get pods kubectl get pods --field-selector &amp;#34;&amp;#34; 支持的字段 不同的 Kubernetes 资源类型支持不同的字段选择器。所有资源类型都支持 metadata.name 和 metadata.namespace 字段。使用不被支持的字段选择器会产生错误，例如：
kubectl get ingress --field-selector foo.bar=baz Error from server (BadRequest): Unable to find &amp;quot;ingresses&amp;quot; that match label selector &amp;quot;&amp;quot;, field selector &amp;quot;foo.bar=baz&amp;quot;: &amp;quot;foo.bar&amp;quot; is not a known field selector: only &amp;quot;metadata.</description>
    </item>
    
    <item>
      <title>推荐使用的标签</title>
      <link>https://lijun.in/concepts/overview/working-with-objects/common-labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/concepts/overview/working-with-objects/common-labels/</guid>
      <description>除了 kubectl 和 dashboard 之外，您可以使用其他工具来可视化和管理 Kubernetes 对象。一组通用的标签可以让多个工具之间相互操作，用所有工具都能理解的通用方式描述对象。
除了支持工具外，推荐的标签还以一种可以查询的方式描述了应用程序。
元数据围绕 应用（application） 的概念进行组织。Kubernetes 不是 平台即服务（PaaS），没有或强制执行正式的应用程序概念。 相反，应用程序是非正式的，并使用元数据进行描述。应用程序包含的定义是松散的。
这些是推荐的标签。它们使管理应用程序变得更容易但不是任何核心工具所必需的。
共享标签和注解都使用同一个前缀：app.kubernetes.io。没有前缀的标签是用户私有的。共享前缀可以确保共享标签不会干扰用户自定义的标签。
标签 为了充分利用这些标签，应该在每个资源对象上都使用它们。
   键 描述 示例 类型     app.kubernetes.io/name 应用程序的名称 mysql 字符串   app.kubernetes.io/instance 用于唯一确定应用实例的名称 wordpress-abcxzy 字符串   app.kubernetes.io/version 应用程序的当前版本（例如，语义版本，修订版哈希等） 5.7.21 字符串   app.kubernetes.io/component 架构中的组件 database 字符串   app.kubernetes.io/part-of 此级别的更高级别应用程序的名称 wordpress 字符串   app.kubernetes.io/managed-by 用于管理应用程序的工具 helm 字符串    为说明这些标签的实际使用情况，请看下面的 StatefulSet 对象：
apiVersion: apps/v1 kind: StatefulSet metadata: labels: app.</description>
    </item>
    
  </channel>
</rss>