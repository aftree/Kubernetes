<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😝 - 扩展 Kubernetes on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/tasks/access-kubernetes-api/</link>
    <description>Recent content in 😝 - 扩展 Kubernetes on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/tasks/access-kubernetes-api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>配置聚合层</title>
      <link>https://lijun.in/tasks/access-kubernetes-api/configure-aggregation-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/access-kubernetes-api/configure-aggregation-layer/</guid>
      <description>配置 聚合层 允许 Kubernetes apiserver 使用其它 API 扩展，这些 API 不是核心 Kubernetes API 的一部分。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
. note &amp;gt;}}
要使聚合层在您的环境中正常工作以支持代理服务器和扩展 apiserver 之间的相互 TLS 身份验证，需要满足一些设置要求。Kubernetes 和 kube-apiserver 具有多个 CA，因此请确保代理是由聚合层 CA 签名的，而不是由主 CA 签名的。
. caution &amp;gt;}}
对不同的客户端类型重复使用相同的 CA 会对群集的功能产生负面影响。有关更多信息，请参见 CA重用和冲突。
. /caution &amp;gt;}} . /note &amp;gt;}}
认证流程 与自定义资源定义（CRD）不同，除标准的 Kubernetes apiserver 外，Aggregation API 还涉及另一个服务器：扩展 apiserver。Kubernetes apiserver 将需要与您的扩展 apiserver 通信，并且您的扩展 apiserver 也需要与 Kubernetes apiserver 通信。为了确保此通信的安全，Kubernetes apiserver 使用 x509 证书向扩展 apiserver 认证。</description>
    </item>
    
    <item>
      <title>设置一个扩展的 API server</title>
      <link>https://lijun.in/tasks/access-kubernetes-api/setup-extension-api-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/access-kubernetes-api/setup-extension-api-server/</guid>
      <description>设置一个扩展的 API server 来使用聚合层以让 Kubernetes apiserver 使用其它 API 进行扩展，这些 API 不是核心 Kubernetes API 的一部分。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}}  您需要拥有一个运行的 Kubernetes 集群。 您必须 配置聚合层 并且启用 apiserver 的相关参数。  . heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
设置一个扩展的 api-server 来使用聚合层 以下步骤描述如何 在一个高层次 设置一个扩展的 apiserver。无论您使用的是 YAML 配置还是使用 API，这些步骤都适用。目前我们正在尝试区分出两者的区别。有关使用 YAML 配置的具体示例，您可以在 Kubernetes 库中查看 sample-apiserver。
或者，您可以使用现有的第三方解决方案，例如 apiserver-builder，它将生成框架并自动执行以下所有步骤。
 确保启用了 APIService API（检查 --runtime-config）。默认应该是启用的，除非被特意关闭了。 您可能需要制定一个 RBAC 规则，以允许您添加 APIService 对象，或让您的集群管理员创建一个。（由于 API 扩展会影响整个集群，因此不建议在实时集群中对 API 扩展进行测试/开发/调试） 创建 Kubernetes 命名空间，扩展的 api-service 将运行在该命名空间中。 创建（或获取）用来签署服务器证书的 CA 证书，扩展 api-server 中将使用该证书做 HTTPS 连接。 为 api-server 创建一个服务端的证书（或秘钥）以使用 HTTPS。这个证书应该由上述的 CA 签署。同时应该还要有一个 Kube DNS 名称的 CN，这是从 Kubernetes 服务派生而来的，格式为 &amp;lt;service name&amp;gt;.</description>
    </item>
    
    <item>
      <title>使用 HTTP 代理访问 Kubernetes API</title>
      <link>https://lijun.in/tasks/access-kubernetes-api/http-proxy-access-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/access-kubernetes-api/http-proxy-access-api/</guid>
      <description>本文说明如何使用 HTTP 代理访问 Kubernetes API。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}}  . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}   如果您的集群中还没有任何应用，使用如下命令启动一个 Hello World 应用：  kubectl run node-hello --image=gcr.io/google-samples/node-hello:1.0 --port=8080 使用 kubectl 启动代理服务器 使用如下命令启动 Kubernetes API 服务器的代理：
kubectl proxy --port=8080  探究 Kubernetes API 当代理服务器在运行时，你可以通过 curl、wget 或者浏览器访问 API。
获取 API 版本：
curl http://localhost:8080/api/ { &amp;quot;kind&amp;quot;: &amp;quot;APIVersions&amp;quot;, &amp;quot;versions&amp;quot;: [ &amp;quot;v1&amp;quot; ], &amp;quot;serverAddressByClientCIDRs&amp;quot;: [ { &amp;quot;clientCIDR&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot;, &amp;quot;serverAddress&amp;quot;: &amp;quot;10.0.2.15:8443&amp;quot; } ] }  获取 Pod 列表：</description>
    </item>
    
  </channel>
</rss>