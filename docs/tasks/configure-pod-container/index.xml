<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😝 - 配置 Pods 和容器 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/tasks/configure-pod-container/</link>
    <description>Recent content in 😝 - 配置 Pods 和容器 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/tasks/configure-pod-container/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>为容器和 Pod 分配内存资源</title>
      <link>https://lijun.in/tasks/configure-pod-container/assign-memory-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/assign-memory-resource/</guid>
      <description>此页面显示如何将内存 请求 （request）和内存 限制 （limit）分配给一个容器。我们保障容器拥有它请求数量的内存，但不允许使用超过限制数量的内存。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
您集群中的每个节点必须拥有至少 300 MiB 的内存。
该页面上的一些步骤要求您在集群中运行 metrics-server 服务。如果您已经有在运行中的 metrics-server，则可以跳过这些步骤。
如果您运行的是 Minikube，可以运行下面的命令启用 metrics-server：
minikube addons enable metrics-server 要查看 metrics-server 或资源指标 API (metrics.k8s.io) 是否已经运行，请运行以下命令：
kubectl get apiservices 如果资源指标 API 可用，则输出结果将包含对 metrics.k8s.io 的引用信息。
NAME v1beta1.metrics.k8s.io 创建命名空间 创建一个命名空间，以便将本练习中创建的资源与集群的其余部分隔离。
kubectl create namespace mem-example 指定内存请求和限制 要为容器指定内存请求，请在容器资源清单中包含 resources：requests 字段。 同理，要指定内存限制，请包含 resources：limits。
在本练习中，您将创建一个拥有一个容器的 Pod。 容器将会请求 100 MiB 内存，并且内存会被限制在 200 MiB 以内。 这是 Pod 的配置文件：</description>
    </item>
    
    <item>
      <title>为 Windows 的 pod 和容器配置 RunAsUserName</title>
      <link>https://lijun.in/tasks/configure-pod-container/configure-runasusername/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/configure-runasusername/</guid>
      <description>. feature-state for_k8s_version=&amp;quot;v1.17&amp;rdquo; state=&amp;quot;beta&amp;rdquo; &amp;gt;}}
本页展示如何为运行在 Windows 节点上的 pod 和容器启用并使用 RunAsUserName 功能。此功能旨在成为 Windows 版的 runAsUser（Linux），允许用户使用与默认用户名不同的用户名运行容器 entrypoint。
. note &amp;gt;}}
该功能目前处于 beta 状态。 RunAsUserName 的整体功能不会出现变更，但是关于用户名验证的部分可能会有所更改。 . /note &amp;gt;}}
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} 你必须有一个 Kubernetes 集群，并且 kubectl 必须能和集群通信。集群应该要有 Windows 工作节点，将在其中调度运行 Windows 工作负载的 pod 和容器。
为 Pod 设置 Username 要指定运行 Pod 容器时所使用的用户名，请在 Pod 声明中包含 securityContext （[PodSecurityContext](/docs/reference/generated/kubernetes-api/. param &amp;ldquo;version&amp;rdquo; &amp;gt;}}/#podsecuritycontext-v1-core)）字段，并在其内部包含 windowsOptions （[WindowsSecurityContextOptions](/docs/reference/generated/kubernetes-api/. param &amp;ldquo;version&amp;rdquo; &amp;gt;}}/#windowssecuritycontextoptions-v1-core)）字段的 runAsUserName 字段。
您为 Pod 指定的 Windows SecurityContext 选项适用于该 Pod 中（包括 init 容器）的所有容器。</description>
    </item>
    
    <item>
      <title>为容器和 Pods 分配 CPU 资源</title>
      <link>https://lijun.in/tasks/configure-pod-container/assign-cpu-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/assign-cpu-resource/</guid>
      <description>此页面显示如何将 CPU request 和 CPU limit 分配给一个容器。容器使用的 CPU 不能超过配额限制。 如果系统有空闲的 CPU 时间，则可以保证根据请求给容器分配尽可能多的 CPU 资源。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
集群中的每个节点必须至少具有 1 个 CPU。
此页面上的一些步骤要求您在集群中运行metrics-server 服务。如果您的集群中已经有正在运行的 metrics-server 服务，那么您可以跳过这些步骤。
如果您正在运行. glossary_tooltip term_id=&amp;quot;minikube&amp;rdquo; &amp;gt;}}，请运行以下命令启用 metrics-server：
minikube addons enable metrics-server 查看是 metrics-server（或者其他资源度量 API 服务提供者，metrics.k8s.io ）是否正在运行，请键入以下命令：
kubectl get apiservices 如果资源指标 API 可用，则会输出将包含一个参考信息 metrics.k8s.io。
NAME v1beta1.metrics.k8s.io 创建一个命名空间 创建一个命名空间 . glossary_tooltip term_id=&amp;quot;namespace&amp;rdquo; &amp;gt;}}，以便在本练习中创建的资源与集群的其余部分资源隔离。
kubectl create namespace cpu-example 指定一个 CPU 请求和 CPU 限制 要为容器指定 CPU 请求，请包含 resources：requests 字段 在容器资源清单中。要指定 CPU 限制，请包含 resources：limits。</description>
    </item>
    
    <item>
      <title>配置 Pod 的服务质量</title>
      <link>https://lijun.in/tasks/configure-pod-container/quality-service-pod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/quality-service-pod/</guid>
      <description>本文介绍怎样配置 Pod 让其获得特定的服务质量（QoS）类。Kubernetes 使用 QoS 类来决定 Pod 的调度和驱逐策略。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
QoS 类 Kubernetes 创建 Pod 时就给它指定了下列一种 QoS 类：
 Guaranteed Burstable BestEffort  创建命名空间 创建一个命名空间，以便将本练习所创建的资源与集群的其余资源相隔离。
kubectl create namespace qos-example 创建一个 QoS 类为 Guaranteed 的 Pod 对于 QoS 类为 Guaranteed 的 Pod：
 Pod 中的每个容器必须指定内存请求和内存限制，并且两者要相等。 Pod 中的每个容器必须指定 CPU 请求和 CPU 限制，并且两者要相等。  下面是包含一个容器的 Pod 配置文件。 容器设置了内存请求和内存限制，值都是 200 MiB。 容器设置了 CPU 请求和 CPU 限制，值都是 700 milliCPU：</description>
    </item>
    
    <item>
      <title>为容器分派扩展资源</title>
      <link>https://lijun.in/tasks/configure-pod-container/extended-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/extended-resource/</guid>
      <description>. feature-state state=&amp;quot;stable&amp;rdquo; &amp;gt;}}
本文介绍如何为容器指定扩展资源。
. feature-state state=&amp;quot;stable&amp;rdquo; &amp;gt;}}
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
在您开始此练习前，请先练习为节点广播扩展资源。 在那个练习中将配置您的一个节点来广播 dongle 资源。
给 Pod 分派扩展资源 要请求扩展资源，需要在您的容器清单中包括 resources:requests 字段。 扩展资源可以使用任何完全限定名称，只是不能使用 *.kubernetes.io/。 有效的扩展资源名的格式为 example.com/foo，其中 example.com 应被替换为您的组织的域名，而 foo 则是描述性的资源名称。
下面是包含一个容器的 Pod 配置文件：
. codenew file=&amp;quot;pods/resource/extended-resource-pod.yaml&amp;rdquo; &amp;gt;}}
在配置文件中，您可以看到容器请求了 3 个 dongles。
创建 Pod：
kubectl apply -f https://k8s.io/examples/pods/resource/extended-resource-pod.yaml 检查 Pod 是否运行正常：
kubectl get pod extended-resource-demo 描述 Pod:
kubectl describe pod extended-resource-demo 输出结果显示 dongle 请求如下：</description>
    </item>
    
    <item>
      <title>配置 Pod 以使用卷进行存储</title>
      <link>https://lijun.in/tasks/configure-pod-container/configure-volume-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/configure-volume-storage/</guid>
      <description>此页面展示了如何配置 Pod 以使用卷进行存储。
只要容器存在，容器的文件系统就会存在，因此当一个容器终止并重新启动，对该容器的文件系统改动将丢失。对于独立于容器的持久化存储，您可以使用卷。这对于有状态应用程序尤为重要，例如键值存储（如 Redis）和数据库。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
为 Pod 配置卷 在本练习中，您将创建一个运行 Pod，该 Pod 仅运行一个容器并拥有一个类型为 emptyDir 的卷，在整个 Pod 生命周期中一直存在，即使 Pod 中的容器被终止和重启。以下是 Pod 的配置：
. codenew file=&amp;quot;pods/storage/redis.yaml&amp;rdquo; &amp;gt;}}
 创建 Pod:  ```shell kubectl apply -f https://k8s.io/examples/pods/storage/redis.yaml ```   验证 Pod 中的容器是否正在运行，然后留意 Pod 的更改：  ```shell kubectl get pod redis --watch ``` 输出如下： ```shell NAME READY STATUS RESTARTS AGE redis 1/1 Running 0 13s ```   在另一个终端，用 shell 连接正在运行的容器：  ```shell kubectl exec -it redis -- /bin/bash ```   在您的 shell 终端中，切换到 /data/redis 目录下，然后创建一个文件：  ```shell root@redis:/data# cd /data/redis/ root@redis:/data/redis# echo Hello &amp;gt; test-file ```   在您的 shell 终端中，列出正在运行的进程：  ```shell root@redis:/data/redis# apt-get update root@redis:/data/redis# apt-get install procps root@redis:/data/redis# ps aux ``` 输出类似于： ```shell USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND redis 1 0.</description>
    </item>
    
    <item>
      <title>配置 Pod 以使用 PersistentVolume 作为存储</title>
      <link>https://lijun.in/tasks/configure-pod-container/configure-persistent-volume-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/configure-persistent-volume-storage/</guid>
      <description>本文介绍如何配置 Pod 使用 PersistentVolumeClaim 作为存储。 以下是该过程的总结：
  集群管理员创建由物理存储支持的 PersistentVolume。管理员不将卷与任何 Pod 关联。
  群集用户创建一个 PersistentVolumeClaim，它将自动绑定到合适的 PersistentVolume。
  用户创建一个使用 PersistentVolumeClaim 作为存储的 Pod。
  . heading &amp;ldquo;prerequisites&amp;rdquo; %}}   您需要一个包含单个节点的 Kubernetes 集群，并且必须配置 kubectl 命令行工具以便与集群交互。 如果还没有单节点集群，可以使用 Minikube 创建一个。
  熟悉持久卷中的材料。
  在你的节点上创建一个 index.html 文件 打开集群中节点的一个 shell。 如何打开 shell 取决于集群的设置。 例如，如果您正在使用 Minikube，那么可以通过输入 minikube ssh 来打开节点的 shell。
在 shell 中，创建一个 /mnt/data 目录：
mkdir /mnt/data  在 /mnt/data 目录中创建一个 index.html 文件：</description>
    </item>
    
    <item>
      <title>配置 Pod 使用投射卷作存储</title>
      <link>https://lijun.in/tasks/configure-pod-container/configure-projected-volume-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/configure-projected-volume-storage/</guid>
      <description>本文介绍怎样通过投射 卷将现有的多个卷资源挂载到相同的目录。 当前，secret、configMap、downwardAPI 和 serviceAccountToken 卷可以被投射。
. note &amp;gt;}}
serviceAccountToken 不是一种卷类型 . /note &amp;gt;}}
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
为 Pod 配置投射卷 本练习中，您将从本地文件来创建包含有用户名和密码的 Secret。然后创建运行一个容器的 Pod，该 Pod 使用投射 卷将 Secret 挂载到相同的路径下。
下面是 Pod 的配置文件：
. codenew file=&amp;quot;pods/storage/projected.yaml&amp;rdquo; &amp;gt;}}
    &amp;lt;!--# Create files containing the username and password:--&amp;gt;# 创建包含用户名和密码的文件: echo -n &amp;#34;admin&amp;#34; &amp;gt; ./username.txt echo -n &amp;#34;1f2d1e2e67df&amp;#34; &amp;gt; ./password.txt--&amp;gt; &amp;lt;!--# Package these files into secrets:--&amp;gt;# 将上述文件引用到 Secret： kubectl create secret generic user --from-file=.</description>
    </item>
    
    <item>
      <title>为 Pod 配置服务账户</title>
      <link>https://lijun.in/tasks/configure-pod-container/configure-service-account/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/configure-service-account/</guid>
      <description>服务账户为 Pod 中运行的进程提供了一个标识。
本文是服务账户的用户使用介绍。您也可以参考集群管理指南之服务账户。
. note &amp;gt;}}
本文档描述 Kubernetes 项目推荐的集群中服务帐户的行为。 集群管理员也可能已经定制了服务账户在集群中的属性，在这种情况下，本文档可能并不适用。
. /note &amp;gt;}}
当您（人类）访问集群时（例如，使用 kubectl），api 服务器将您的身份验证为特定的用户帐户（当前这通常是 admin，除非您的集群管理员已经定制了您的集群配置）。 Pod 内的容器中的进程也可以与 api 服务器接触。 当它们进行身份验证时，它们被验证为特定的服务帐户（例如，default）。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
使用默认的服务账户访问 API 服务器 当您创建 Pod 时，如果没有指定服务账户，Pod 会被指定命名空间中的default服务账户。 如果您查看 Pod 的原始 json 或 yaml（例如：kubectl get pods/podname -o yaml）， 您可以看到 spec.serviceAccountName 字段已经被自动设置了。
您可以使用自动挂载给 Pod 的服务账户凭据访问 API，访问集群 中有相关描述。 服务账户的 API 许可取决于您所使用的授权插件和策略。
在 1.6 以上版本中，您可以通过在服务账户上设置 automountServiceAccountToken: false 来实现不给服务账号自动挂载 API 凭据：</description>
    </item>
    
    <item>
      <title>从私有仓库拉取镜像</title>
      <link>https://lijun.in/tasks/configure-pod-container/pull-image-private-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/pull-image-private-registry/</guid>
      <description>本文介绍如何使用 Secret 从私有的 Docker 镜像仓库或代码仓库拉取镜像来创建 Pod。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}}  . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}  您需要 Docker ID 和密码来进行本练习。
登录 Docker 镜像仓库 在个人电脑上，要想拉取私有镜像必须在镜像仓库上进行身份验证。
docker login 当提示时，输入 Docker 用户名和密码。
登录过程会创建或更新保存有授权令牌的 config.json 文件。
查看 config.json 文件：
cat ~/.docker/config.json 输出结果包含类似于以下内容的部分：
{ &amp;#34;auths&amp;#34;: { &amp;#34;https://index.docker.io/v1/&amp;#34;: { &amp;#34;auth&amp;#34;: &amp;#34;c3R...zE2&amp;#34; } } } . note &amp;gt;}}
如果使用 Docker 凭证仓库，则不会看到 auth 条目，看到的将是以仓库名称作为值的 credsStore 条目。 . /note &amp;gt;}}
在集群中创建保存授权令牌的 Secret Kubernetes 集群使用 docker-registry 类型的 Secret 来通过容器仓库的身份验证，进而提取私有映像。</description>
    </item>
    
    <item>
      <title>配置存活、就绪和启动探测器</title>
      <link>https://lijun.in/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/</guid>
      <description>这篇文章介绍如何给容器配置存活、就绪和启动探测器。
kubelet 使用存活探测器来知道什么时候要重启容器。例如，存活探测器可以捕捉到死锁（应用程序在运行，但是无法继续执行后面的步骤）。这样的情况下重启容器有助于让应用程序在有问题的情况下更可用。
kubelet 使用就绪探测器可以知道容器什么时候准备好了并可以开始接受请求流量， 当一个 Pod 内的所有容器都准备好了，才能把这个 Pod 看作就绪了。这种信号的一个用途就是控制哪个 Pod 作为 Service 的后端。在 Pod 还没有准备好的时候，会从 Service 的负载均衡器中被剔除的。
kubelet 使用启动探测器可以知道应用程序容器什么时候启动了。如果配置了这类探测器，就可以控制容器在启动成功后再进行存活性和就绪检查，确保这些存活、就绪探测器不会影响应用程序的启动。这可以用于对慢启动容器进行存活性检测，避免它们在启动运行之前就被杀掉。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
定义存活命令 许多长时间运行的应用程序最终会过渡到断开的状态，除非重新启动，否则无法恢复。Kubernetes 提供了存活探测器来发现并补救这种情况。
在这篇练习中，会创建一个 Pod，其中运行一个基于 k8s.gcr.io/busybox 镜像的容器。下面是这个 Pod 的配置文件。
. codenew file=&amp;quot;pods/probe/exec-liveness.yaml&amp;rdquo; &amp;gt;}}
在这个配置文件中，可以看到 Pod 中只有一个容器。periodSeconds 字段指定了 kubelet 应该每 5 秒执行一次存活探测。initialDelaySeconds 字段告诉 kubelet 在执行第一次探测前应该等待 5 秒。kubelet 在容器内执行命令 cat /tmp/healthy 来进行探测。如果命令执行成功并且返回值为 0，kubelet 就会认为这个容器是健康存活的。如果这个命令返回非 0 值，kubelet 会杀死这个容器并重新启动它。
当容器启动时，执行如下的命令：
/bin/sh -c &amp;#34;touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600&amp;#34; 这个容器生命的前 30 秒， /tmp/healthy 文件是存在的。所以在这最开始的 30 秒内，执行命令 cat /tmp/healthy 会返回成功码。30 秒之后，执行命令 cat /tmp/healthy 就会返回失败码。</description>
    </item>
    
    <item>
      <title>将 Pod 分配给节点</title>
      <link>https://lijun.in/tasks/configure-pod-container/assign-pods-nodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/assign-pods-nodes/</guid>
      <description>此页面显示如何将 Kubernetes Pod 分配给 Kubernetes 集群中的特定节点。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
给节点添加标签   列出集群中的节点
 kubectl get nodes  输出类似如下：
 NAME STATUS AGE VERSION worker0 Ready 1d v1.6.0+fff5156 worker1 Ready 1d v1.6.0+fff5156 worker2 Ready 1d v1.6.0+fff5156      选择其中一个节点，为它添加标签：
 kubectl label nodes &amp;lt;your-node-name&amp;gt; disktype=ssd  &amp;lt;your-node-name&amp;gt; 是你选择的节点的名称。
    验证你选择的节点是否有 disktype=ssd 标签：
 kubectl get nodes --show-labels  输出类似如下：</description>
    </item>
    
    <item>
      <title>配置 Pod 初始化</title>
      <link>https://lijun.in/tasks/configure-pod-container/configure-pod-initialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/configure-pod-initialization/</guid>
      <description>本文介绍在应用容器运行前，怎样利用 Init 容器初始化 Pod。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
创建一个包含 Init 容器的 Pod 本例中您将创建一个包含一个应用容器和一个 Init 容器的 Pod。Init 容器在应用容器启动前运行完成。
下面是 Pod 的配置文件：
. codenew file=&amp;quot;pods/init-containers.yaml&amp;rdquo; &amp;gt;}}
配置文件中，您可以看到应用容器和 Init 容器共享了一个卷。
Init 容器将共享卷挂载到了 /work-dir 目录，应用容器将共享卷挂载到了 /usr/share/nginx/html 目录。 Init 容器执行完下面的命令就终止：
wget -O /work-dir/index.html http://kubernetes.io  请注意 Init 容器在 nginx 服务器的根目录写入 index.html。
创建 Pod：
kubectl create -f https://k8s.io/examples/pods/init-containers.yaml  检查 nginx 容器运行正常：
kubectl get pod init-demo  结果表明 nginx 容器运行正常：</description>
    </item>
    
    <item>
      <title>为容器的生命周期事件设置处理函数</title>
      <link>https://lijun.in/tasks/configure-pod-container/attach-handler-lifecycle-event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/attach-handler-lifecycle-event/</guid>
      <description>这个页面将演示如何为容器的生命周期事件挂接处理函数。Kubernetes 支持 postStart 和 preStop 事件。 当一个容器启动后，Kubernetes 将立即发送 postStart 事件；在容器被终结之前， Kubernetes 将发送一个 preStop 事件。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
定义 postStart 和 preStop 处理函数 在本练习中，你将创建一个包含一个容器的 Pod，该容器为 postStart 和 preStop 事件提供对应的处理函数。
下面是对应 Pod 的配置文件
. codenew file=&amp;quot;pods/lifecycle-events.yaml&amp;rdquo; &amp;gt;}}
在上述配置文件中，你可以看到 postStart 命令在容器的 /usr/share 目录下写入文件 message。 命令 preStop 负责优雅地终止 nginx 服务。当因为失效而导致容器终止时，这一处理方式很有用。```
创建 Pod：
kubectl apply -f https://k8s.io/examples/pods/lifecycle-events.yaml  验证 Pod 中的容器已经运行：
kubectl get pod lifecycle-demo  使用 shell 连接到你的 Pod 里的容器：</description>
    </item>
    
    <item>
      <title>使用 ConfigMap 配置 Pod</title>
      <link>https://lijun.in/tasks/configure-pod-container/configure-pod-configmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/configure-pod-configmap/</guid>
      <description>ConfigMap 允许您将配置文件与镜像文件分离，以使容器化的应用程序具有可移植性。该页面提供了一系列使用示例，这些示例演示了如何使用存储在 ConfigMap 中的数据创建 ConfigMap 和配置 Pod。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
创建 ConfigMap 您可以在 kustomization.yaml 中使用 kubectl create configmap 或 ConfigMap 生成器来创建ConfigMap。注意，从 1.14 版本开始， kubectl 开始支持 kustomization.yaml。
使用 kubectl 创建 ConfigMap 在目录, 文件, 或者文字值中使用 kubectl create configmap 命令创建configmap：
kubectl create configmap &amp;lt;map-name&amp;gt; &amp;lt;data-source&amp;gt; 其中， &amp;lt;map-name&amp;gt; 是要分配给 ConfigMap 的名称，&amp;lt;data-source&amp;gt; 是要从中提取数据的目录，文件或者文字值。
数据源对应于 ConfigMap 中的 key-value (键值对)
 key = 您在命令行上提供的文件名或者密钥 value = 您在命令行上提供的文件内容或者文字值  您可以使用kubectl describe或者 kubectl get检索有关 ConfigMap 的信息。</description>
    </item>
    
    <item>
      <title>在 Pod 中的容器之间共享进程命名空间</title>
      <link>https://lijun.in/tasks/configure-pod-container/share-process-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/share-process-namespace/</guid>
      <description>. feature-state state=&amp;quot;stable&amp;rdquo; for_k8s_version=&amp;quot;v1.17&amp;rdquo; &amp;gt;}}
此页面展示如何为 pod 配置进程命名空间共享。 当启用进程命名空间共享时，容器中的进程对该 pod 中的所有其他容器都是可见的。
您可以使用此功能来配置协作容器，比如日志处理 sidecar 容器，或者对那些不包含诸如 shell 等调试实用工具的镜像进行故障排查。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
配置 Pod 进程命名空间共享使用 v1.PodSpec 中的 ShareProcessNamespace 字段启用。例如：
. codenew file=&amp;quot;pods/share-process-namespace.yaml&amp;rdquo; &amp;gt;}}
  在集群中创建 nginx pod：
kubectl apply -f https://k8s.io/examples/pods/share-process-namespace.yaml   获取容器 shell，执行 ps：
kubectl attach -it nginx -c shell 如果没有看到命令提示符，请按 enter 回车键。
/ # ps ax PID USER TIME COMMAND 1 root 0:00 /pause 8 root 0:00 nginx: master process nginx -g daemon off; 14 101 0:00 nginx: worker process 15 root 0:00 sh 21 root 0:00 ps ax   您可以在其他容器中对进程发出信号。例如，发送 SIGHUP 到 nginx 以重启工作进程。这需要 SYS_PTRACE 功能。</description>
    </item>
    
    <item>
      <title>创建静态 Pod</title>
      <link>https://lijun.in/tasks/configure-pod-container/static-pod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/static-pod/</guid>
      <description>静态 Pod 在指定的节点上由 kubelet 守护进程直接管理，不需要 . glossary_tooltip text=&amp;quot;API 服务&amp;rdquo; term_id=&amp;quot;kube-apiserver&amp;rdquo; &amp;gt;}} 监管。 不像 Pod 是由控制面管理的（例如，. glossary_tooltip text=&amp;quot;Deployment&amp;rdquo; term_id=&amp;quot;deployment&amp;rdquo; &amp;gt;}}）；相反 kubelet 监视每个静态 Pod（在它崩溃之后重新启动）。
静态 Pod 永远都会绑定到一个指定节点上的 . glossary_tooltip term_id=&amp;quot;kubelet&amp;rdquo; &amp;gt;}}。
kubelet 会尝试通过 Kubernetes API 服务器为每个静态 Pod 自动创建一个 . glossary_tooltip text=&amp;quot;镜像 Pod&amp;rdquo; term_id=&amp;quot;mirror-pod&amp;rdquo; &amp;gt;}}。 这意味着节点上运行的静态 Pod 对 API 服务来说是不可见的，但是不能通过 API 服务器来控制。
. note &amp;gt;}} 如果你在运行一个 Kubernetes 集群，并且在每个节点上都运行一个静态 Pod，就可能需要考虑使用 . glossary_tooltip text=&amp;quot;DaemonSet&amp;rdquo; term_id=&amp;quot;daemonset&amp;rdquo; &amp;gt;}} 替代这种方式。 . /note &amp;gt;}}
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.</description>
    </item>
    
    <item>
      <title>将 Docker Compose 文件转换为 Kubernetes 资源</title>
      <link>https://lijun.in/tasks/configure-pod-container/translate-compose-kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/configure-pod-container/translate-compose-kubernetes/</guid>
      <description>Kompose 是什么？它是个转换工具，可将 compose（即 Docker Compose）所组装的所有内容转换成容器编排器（Kubernetes 或 OpenShift）可识别的形式。
更多信息请参考 Kompose 官网 http://kompose.io。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
安装 Kompose 我们有很多种方式安装 Kompose。首选方式是从最新的 GitHub 发布页面下载二进制文件。
GitHub 发布版本 Kompose 通过 GitHub 发布版本，发布周期为三星期。您可以在GitHub 发布页面上看到所有当前版本。
# Linux curl -L https://github.com/kubernetes/kompose/releases/download/v1.16.0/kompose-linux-amd64 -o kompose # macOS curl -L https://github.com/kubernetes/kompose/releases/download/v1.16.0/kompose-darwin-amd64 -o kompose # Windows curl -L https://github.com/kubernetes/kompose/releases/download/v1.16.0/kompose-windows-amd64.exe -o kompose.exe chmod +x kompose sudo mv ./kompose /usr/local/bin/kompose 或者，您可以下载 tarball。
Go 用 go get 命令从主分支拉取最新的开发变更的方法安装 Kompose。</description>
    </item>
    
  </channel>
</rss>