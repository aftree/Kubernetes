<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😝 - 给应用注入数据 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/tasks/inject-data-application/</link>
    <description>Recent content in 😝 - 给应用注入数据 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/tasks/inject-data-application/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>为容器设置启动时要执行的命令及其入参</title>
      <link>https://lijun.in/tasks/inject-data-application/define-command-argument-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/inject-data-application/define-command-argument-container/</guid>
      <description>本页将展示如何为 . glossary_tooltip term_id=&amp;quot;pod&amp;rdquo; &amp;gt;}} 中的容器设置启动时要执行的命令及其入参。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
创建 Pod 时设置命令及入参 创建 Pod 时，可以为其下的容器设置启动时要执行的命令及其入参。如果要设置命令，就填写在配置文件的 command 字段下，如果要设置命令的入参，就填写在配置文件的 args 字段下。一旦 Pod 创建完成，该命令及其入参就无法再进行更改了。
如果在配置文件中设置了容器启动时要执行的命令及其入参，那么容器镜像中自带的命令与入参将会被覆盖而不再执行。如果配置文件中只是设置了入参，却没有设置其对应的命令，那么容器镜像中自带的命令会使用该新入参作为其执行时的入参。
. note &amp;gt;}} 在有些容器运行时中，command 字段对应 entrypoint，请参阅下面的 注意。 . /note &amp;gt;}}
本示例中，将创建一个只包含单个容器的 Pod。在 Pod 配置文件中设置了一个命令与两个入参：
. codenew file=&amp;quot;pods/commands.yaml&amp;rdquo; &amp;gt;}}
  基于 YAML 文件创建一个 Pod：
kubectl apply -f https://k8s.io/examples/pods/commands.yaml    获取正在运行的 Pods：
kubectl get pods ``
查询结果显示在 command-demo 这个 Pod 下运行的容器已经启动完成。</description>
    </item>
    
    <item>
      <title>为容器设置环境变量</title>
      <link>https://lijun.in/tasks/inject-data-application/define-environment-variable-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/inject-data-application/define-environment-variable-container/</guid>
      <description>本页将展示如何为 kubernetes Pod 下的容器设置环境变量。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
为容器设置一个环境变量 创建 Pod 时，可以为其下的容器设置环境变量。通过配置文件的 env 或者 envFrom 字段来设置环境变量。
本示例中，将创建一个只包含单个容器的 Pod。Pod 的配置文件中设置环境变量的名称为 DEMO_GREETING， 其值为 &amp;quot;Hello from the environment&amp;quot;。下面是 Pod 的配置文件内容：
. codenew file=&amp;quot;pods/inject/envars.yaml&amp;rdquo; &amp;gt;}}
  基于 YAML 文件创建一个 Pod：
kubectl apply -f https://k8s.io/examples/pods/inject/envars.yaml     获取一下当前正在运行的 Pods 信息：
kubectl get pods -l purpose=demonstrate-envars 查询结果应为：
NAME READY STATUS RESTARTS AGE envar-demo 1/1 Running 0 9s     进入该 Pod 下的容器并打开一个命令终端：</description>
    </item>
    
    <item>
      <title>使用 PodPreset 将信息注入 Pods</title>
      <link>https://lijun.in/tasks/inject-data-application/podpreset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/inject-data-application/podpreset/</guid>
      <description>在 pod 创建时，用户可以使用 podpreset 对象将 secrets、卷挂载和环境变量等信息注入其中。 本文展示了一些 PodPreset 资源使用的示例。 用户可以从理解 Pod Presets 中了解 PodPresets 的整体情况。
. toc &amp;gt;}}
创建 Pod Preset 简单的 Pod Spec 示例 这里是一个简单的示例，展示了如何通过 Pod Preset 修改 Pod spec 。
. codenew file=&amp;quot;podpreset/preset.yaml&amp;rdquo; &amp;gt;}}
创建 PodPreset：
kubectl apply -f https://k8s.io/examples/podpreset/preset.yaml 检查所创建的 PodPreset：
kubectl get podpreset NAME AGE allow-database 1m 新的 PodPreset 会对所有具有标签 role: frontend 的 Pods 采取行动。
用户提交的 pod spec：
. codenew file=&amp;quot;podpreset/pod.yaml&amp;rdquo; &amp;gt;}}
创建 Pod：
kubectl create -f https://k8s.</description>
    </item>
    
    <item>
      <title>使用 Secret 安全地分发凭证</title>
      <link>https://lijun.in/tasks/inject-data-application/distribute-credentials-secure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/inject-data-application/distribute-credentials-secure/</guid>
      <description>本文展示如何安全地将敏感数据（如密码和加密密钥）注入到 Pods 中。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
将 secret 数据转换为 base-64 形式 假设用户想要有两条 secret 数据：用户名 my-app 和密码 39528$vdg7Jb。 首先使用 Base64 编码 将用户名和密码转化为 base-64 形式。 这里是一个 Linux 示例：
```shell echo -n &#39;my-app&#39; | base64 echo -n &#39;39528$vdg7Jb&#39; | base64 ```  结果显示 base-64 形式的用户名为 bXktYXBw， base-64 形式的密码为 Mzk1MjgkdmRnN0pi。
创建 Secret 这里是一个配置文件，可以用来创建存有用户名和密码的 Secret:
. codenew file=&amp;quot;pods/inject/secret.yaml&amp;rdquo; &amp;gt;}}
  创建 Secret
kubectl create -f https://k8s.io/examples/pods/inject/secret.yaml .</description>
    </item>
    
    <item>
      <title>通过文件将Pod信息呈现给容器</title>
      <link>https://lijun.in/tasks/inject-data-application/downward-api-volume-expose-pod-information/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/inject-data-application/downward-api-volume-expose-pod-information/</guid>
      <description>此页面描述Pod如何使用DownwardAPIVolumeFile把自己的信息呈现给pod中运行的容器。DownwardAPIVolumeFile可以呈现pod的字段和容器字段。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
Downward API 有两种方式可以将Pod和Container字段呈现给运行中的容器：
 环境变量 DownwardAPIVolumeFile  这两种呈现Pod和Container字段的方式都称为Downward API。
存储Pod字段 在这个练习中，你将创建一个包含一个容器的pod。这是该pod的配置文件：
. codenew file=&amp;quot;pods/inject/dapi-volume.yaml&amp;rdquo; &amp;gt;}}
在配置文件中，你可以看到Pod有一个downwardAPI类型的Volume，并且挂载到容器中的/etc。
查看downwardAPI下面的items数组。每个数组元素都是一个[DownwardAPIVolumeFile](/docs/resources-reference/. param &amp;ldquo;version&amp;rdquo; &amp;gt;}}/#downwardapivolumefile-v1-core)。 第一个元素指示Pod的metadata.labels字段的值保存在名为labels的文件中。 第二个元素指示Pod的annotations字段的值保存在名为annotations的文件中。
. note &amp;gt;}} 本示例中的字段是Pod字段，不是Pod中容器的字段。 . /note &amp;gt;}}
创建 Pod：
kubectl apply -f https://k8s.io/examples/pods/inject/dapi-volume.yaml 验证Pod中的容器运行正常：
kubectl get pods 查看容器的日志：
kubectl logs kubernetes-downwardapi-volume-example 输出显示 labels 和 annotations 文件的内容：
cluster=&amp;#34;test-cluster1&amp;#34; rack=&amp;#34;rack-22&amp;#34; zone=&amp;#34;us-est-coast&amp;#34; build=&amp;#34;two&amp;#34; builder=&amp;#34;john-doe&amp;#34; 进入Pod中运行的容器，打开一个shell：
kubectl exec -it kubernetes-downwardapi-volume-example -- sh 在该shell中，查看labels文件：</description>
    </item>
    
    <item>
      <title>通过环境变量将Pod信息呈现给容器</title>
      <link>https://lijun.in/tasks/inject-data-application/environment-variable-expose-pod-information/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/inject-data-application/environment-variable-expose-pod-information/</guid>
      <description>此页面显示了Pod如何使用环境变量把自己的信息呈现给pod中运行的容器。环境变量可以呈现pod的字段和容器字段。
有两种方式可以将Pod和Container字段呈现给运行中的容器： 环境变量 和[DownwardAPIVolumeFiles](/docs/resources-reference/. param &amp;ldquo;version&amp;rdquo; &amp;gt;}}/#downwardapivolumefile-v1-core). 这两种呈现Pod和Container字段的方式都称为Downward API。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
Downward API 有两种方式可以将Pod和Container字段呈现给运行中的容器：
 环境变量 [DownwardAPIVolumeFiles](/docs/resources-reference/. param &amp;ldquo;version&amp;rdquo; &amp;gt;}}/#downwardapivolumefile-v1-core)  这两种呈现Pod和Container字段的方式都称为Downward API。
用Pod字段作为环境变量的值 在这个练习中，你将创建一个包含一个容器的pod。这是该pod的配置文件：
. codenew file=&amp;quot;pods/inject/dapi-envars-pod.yaml&amp;rdquo; &amp;gt;}}
这个配置文件中，你可以看到五个环境变量。env字段是一个[EnvVars](/docs/resources-reference/. param &amp;ldquo;version&amp;rdquo; &amp;gt;}}/#envvar-v1-core)类型的数组。 数组中第一个元素指定MY_NODE_NAME这个环境变量从Pod的spec.nodeName字段获取变量值。同样，其它环境变量也是从Pod的字段获取它们的变量值。
. note &amp;gt;}} 本示例中的字段是Pod字段，不是Pod中容器的字段。 . /note &amp;gt;}}
创建Pod：
kubectl apply -f https://k8s.io/examples/pods/inject/dapi-envars-pod.yaml 验证Pod中的容器运行正常：
kubectl get pods 查看容器日志：
kubectl logs dapi-envars-fieldref 输出信息显示了所选择的环境变量的值：
minikube dapi-envars-fieldref default 172.17.0.4 default 要了解为什么这些值在日志中，请查看配置文件中的command 和 args字段。 当容器启动时，它将五个环境变量的值写入stdout。每十秒重复执行一次。</description>
    </item>
    
  </channel>
</rss>