<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😝 - 管理集群守护进程 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/tasks/manage-daemon/</link>
    <description>Recent content in 😝 - 管理集群守护进程 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/tasks/manage-daemon/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>对 DaemonSet 执行回滚</title>
      <link>https://lijun.in/tasks/manage-daemon/rollback-daemon-set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/manage-daemon/rollback-daemon-set/</guid>
      <description>本文展示了如何对 DaemonSet 执行回滚。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}}  DaemonSet 滚动升级历史和 DaemonSet 回滚特性仅在 Kubernetes 1.7 及以后版本的 kubectl 中支持。 确保您了解如何 对 DaemonSet 执行滚动升级。  对 DaemonSet 执行回滚 步骤 1： 找到想要 DaemonSet 回滚到的历史版本（revision） 如果只想回滚到最后一个版本，可以跳过这一步。
列出 DaemonSet 的所有版本：
kubectl rollout history daemonset &amp;lt;daemonset-name&amp;gt; 该命令返回 DaemonSet 版本列表：
daemonsets &amp;#34;&amp;lt;daemonset-name&amp;gt;&amp;#34; REVISION CHANGE-CAUSE 1 ... 2 ... ...  在创建时，DaemonSet 的变化原因从 kubernetes.io/change-cause 注解（annotation）复制到其版本中。 用户可以在 kubectl 中指定 --record=true ，将执行的命令记录在变化原因注解中。  执行以下命令，来查看指定版本的详细信息：
kubectl rollout history daemonset &amp;lt;daemonset-name&amp;gt; --revision=1 该命令返回相应版本的详细信息：</description>
    </item>
    
    <item>
      <title>对 DaemonSet 执行滚动更新</title>
      <link>https://lijun.in/tasks/manage-daemon/update-daemon-set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/manage-daemon/update-daemon-set/</guid>
      <description>本文介绍了如何对 DaemonSet 执行滚动更新。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}}  Kubernetes 1.6 或者更高版本中才支持 DaemonSet 滚动更新功能。  DaemonSet 更新策略 DaemonSet 有两种更新策略：
 OnDelete: 使用 OnDelete 更新策略时，在更新 DaemonSet 模板后，只有当您手动删除老的 DaemonSet pods 之后，新的 DaemonSet pods 才会被自动创建。跟 Kubernetes 1.6 以前的版本类似。 RollingUpdate: 这是默认的更新策略。使用 RollingUpdate 更新策略时，在更新 DaemonSet 模板后，老的 DaemonSet pods 将被终止，并且将以受控方式自动创建新的 DaemonSet pods。  执行滚动更新 要启用 DaemonSet 的滚动更新功能，必须设置 .spec.updateStrategy.type 为 RollingUpdate。
您可能想设置.spec.updateStrategy.rollingUpdate.maxUnavailable (默认为 1) 和.spec.minReadySeconds (默认为 0)。
步骤 1: 检查 DaemonSet 的滚动更新策略 首先，检查 DaemonSet 的更新策略，确保已经将其设置为 RollingUpdate:
kubectl get ds/&amp;lt;daemonset-name&amp;gt; -o go-template=&amp;#39;{{.</description>
    </item>
    
  </channel>
</rss>