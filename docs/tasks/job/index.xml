<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😝 - 运行 Jobs on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/tasks/job/</link>
    <description>Recent content in 😝 - 运行 Jobs on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/tasks/job/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 CronJob 运行自动化任务</title>
      <link>https://lijun.in/tasks/job/automated-tasks-with-cron-jobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/job/automated-tasks-with-cron-jobs/</guid>
      <description>你可以利用 CronJobs 执行基于时间调度的任务。这些自动化任务和 Linux 或者 Unix 系统的 Cron 任务类似。
CronJobs 在创建周期性以及重复性的任务时很有帮助，例如执行备份操作或者发送邮件。CronJobs 也可以在特定时间调度单个任务，例如你想调度低活跃周期的任务。
. note &amp;gt;}}
从集群版本1.8开始，batch/v2alpha1 API 组中的 CronJob 资源已经被废弃。 你应该切换到 API 服务器默认启用的 batch/v1beta1 API 组。本文中的所有示例使用了batch/v1beta1。 . /note &amp;gt;}}
CronJobs 有一些限制和特点。 例如，在特定状况下，同一个 CronJob 可以创建多个任务。 因此，任务应该是幂等的。 查看更多限制，请参考 CronJobs。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}}  . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}   你需要一个版本 &amp;gt;=1.8 且工作正常的 Kubernetes 集群。对于更早的版本（ &amp;lt;1.8 ），你需要对 API 服务器设置 --runtime-config=batch/v2alpha1=true 来开启 batch/v2alpha1 API，(更多信息请查看 为你的集群开启或关闭 API 版本 ), 然后重启 API 服务器和控制管理器。  创建 CronJob CronJob 需要一个配置文件。 本例中 CronJob 的.</description>
    </item>
    
    <item>
      <title>使用扩展进行并行处理</title>
      <link>https://lijun.in/tasks/job/parallel-processing-expansion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/job/parallel-processing-expansion/</guid>
      <description>在这个示例中，我们将运行从一个公共模板创建的多个 Kubernetes Job。您可能需要先熟悉 Jobs 的基本概念、非并行以及如何使用它。
基本模板扩展 首先，将以下作业模板下载到名为 job-tmpl.yaml 的文件中。
. codenew file=&amp;quot;application/job/job-tmpl.yaml&amp;rdquo; &amp;gt;}}
与 pod 模板不同，我们的 job 模板不是 Kubernetes API 类型。它只是 Job 对象的 yaml 表示， YAML 文件有一些占位符，在使用它之前需要填充这些占位符。$ITEM 语法对 Kubernetes 没有意义。
在这个例子中，容器所做的唯一处理是 echo 一个字符串并睡眠一段时间。 在真实的用例中，处理将是一些重要的计算，例如渲染电影的一帧，或者处理数据库中的若干行。这时，$ITEM 参数将指定帧号或行范围。
这个 Job 及其 Pod 模板有一个标签: jobgroup=jobexample。这个标签在系统中没有什么特别之处。 这个标签使得我们可以方便地同时操作组中的所有作业。 我们还将相同的标签放在 pod 模板上，这样我们就可以用一个命令检查这些 Job 的所有 pod。 创建作业之后，系统将添加更多的标签来区分一个 Job 的 pod 和另一个 Job 的 pod。 注意，标签键 jobgroup 对 Kubernetes 并无特殊含义。您可以选择自己的标签方案。
下一步，将模板展开到多个文件中，每个文件对应要处理的项。
# 下载 job-templ.yaml curl -L -s -O https://k8s.io/examples/application/job/job-tmpl.yaml # 创建临时目录，并且在目录中创建 job yaml 文件 mkdir .</description>
    </item>
    
    <item>
      <title>使用工作队列进行粗粒度并行处理</title>
      <link>https://lijun.in/tasks/job/coarse-parallel-processing-work-queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/job/coarse-parallel-processing-work-queue/</guid>
      <description>本例中，我们会运行包含多个并行工作进程的 Kubernetes Job。
本例中，每个 Pod 一旦被创建，会立即从任务队列中取走一个工作单元并完成它，然后将工作单元从队列中删除后再退出。
下面是本次示例的主要步骤：
  启动一个消息队列服务 本例中，我们使用 RabbitMQ，你也可以用其他的消息队列服务。在实际工作环境中，你可以创建一次消息队列服务然后在多个任务中重复使用。
  创建一个队列，放上消息数据 每个消息表示一个要执行的任务。本例中，每个消息是一个整数值。我们将基于这个整数值执行很长的计算操作。
  启动一个在队列中执行这些任务的 Job。该 Job 启动多个 Pod。每个 Pod 从消息队列中取走一个任务，处理它，然后重复执行，直到队列的队尾。
  . heading &amp;ldquo;prerequisites&amp;rdquo; %}} 要熟悉 Job 基本用法（非并行的），请参考 Job。
. include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
启动消息队列服务 本例使用了 RabbitMQ，使用其他 AMQP 类型的消息服务应该比较容易。
在实际工作中，在集群中一次性部署某个消息队列服务，之后在很多 Job 中复用，包括需要长期运行的服务。
按下面的方法启动 RabbitMQ：
$ kubectl create -f https://raw.githubusercontent.com/kubernetes/kubernetes/release-1.3/examples/celery-rabbitmq/rabbitmq-service.yaml service &amp;#34;rabbitmq-service&amp;#34; created $ kubectl create -f https://raw.githubusercontent.com/kubernetes/kubernetes/release-1.3/examples/celery-rabbitmq/rabbitmq-controller.yaml replicationcontroller &amp;#34;rabbitmq-controller&amp;#34; created 我们仅用到 celery-rabbitmq 示例 中描述的部分功能。</description>
    </item>
    
    <item>
      <title>使用工作队列进行精细的并行处理</title>
      <link>https://lijun.in/tasks/job/fine-parallel-processing-work-queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/job/fine-parallel-processing-work-queue/</guid>
      <description>在这个例子中，我们会运行一个Kubernetes Job，其中的 Pod 会运行多个并行工作进程。
在这个例子中，当每个pod被创建时，它会从一个任务队列中获取一个工作单元，处理它，然后重复，直到到达队列的尾部。
下面是这个示例的步骤概述
 启动存储服务用于保存工作队列。 在这个例子中，我们使用 Redis 来存储工作项。在上一个例子中，我们使用了 RabbitMQ。在这个例子中，由于 AMQP 不能为客户端提供一个良好的方法来检测一个有限长度的工作队列是否为空，我们使用了 Redis 和一个自定义的工作队列客户端库。在实践中，您可能会设置一个类似于 Redis 的存储库，并将其同时用于多项任务或其他事务的工作队列。  创建一个队列，然后向其中填充消息。 每个消息表示一个将要被处理的工作任务。在这个例子中，消息只是一个我们将用于进行长度计算的整数。  启动一个 Job 对队列中的任务进行处理。这个 Job 启动了若干个 Pod 。每个 Pod 从消息队列中取出一个工作任务，处理它，然后重复，直到到达队列的尾部。  . toc &amp;gt;}}
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}}
熟秋基础知识，非并行方式运行 Job。
启动 Redis 对于这个例子，为了简单起见，我们将启动一个单实例的 Redis。 了解如何部署一个可伸缩、高可用的 Redis 例子，请查看 Redis 样例
如果您在使用本文档库的源代码目录，您可以进入如下目录，然后启动一个临时的 Pod 用于运行 Redis 和 一个临时的 service 以便我们能够找到这个 Pod
$ cd content/en/examples/application/job/redis $ kubectl create -f .</description>
    </item>
    
  </channel>
</rss>