<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😝 - 任务 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/tasks/</link>
    <description>Recent content in 😝 - 任务 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/tasks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>示例任务的模板</title>
      <link>https://lijun.in/tasks/example-task-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/example-task-template/</guid>
      <description>. note &amp;gt;}} 还要确保为新文档在目录中创建一个条目。 . /note &amp;gt;}}
这个页面展示了如何&amp;hellip;
. heading &amp;ldquo;prerequisites&amp;rdquo; %}}  . include &amp;ldquo;task-tutorial-prereqs.md&amp;rdquo; &amp;gt;}} . version-check &amp;gt;}} 做这个。 也做这个。  做&amp;hellip;  做这个。 接下来做这个。可能需要阅读一下这个相关解释.  理解 &amp;hellip; [可选部分]
关于你刚才所做的过程，有一点是需要知道的。
. heading &amp;ldquo;whatsnext&amp;rdquo; %}} [可选部分]
 了解更多关于撰写新主题. 查看使用页面模板-任务模板 for how to use this template.  </description>
    </item>
    
    <item>
      <title>😝 - 用插件扩展 kubectl</title>
      <link>https://lijun.in/tasks/extend-kubectl/kubectl-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/extend-kubectl/kubectl-plugins/</guid>
      <description>. feature-state state=&amp;quot;stable&amp;rdquo; &amp;gt;}}
本指南演示了如何为 kubectl 安装和编写扩展。 通过将核心 kubectl 命令看作与 Kubernetes 集群交互的基本构建块，集群管理员可以将插件视为一种利用这些构建块创建更复杂行为的方法。 插件用新的子命令扩展了 kubectl，允许新的和自定义的特性不包括在 kubectl 的主要发行版中。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} 您需要安装一个工作的二进制 kubectl。
. note &amp;gt;}}
插件在 v1.8.0 版本中正式作为 alpha 特性引入。它们已经在 v1.12.0 版本中工作，以支持更广泛的用例。因此，虽然在以前的版本中已经提供了部分插件特性，但如果您遵循这些文档，建议使用 1.12.0 或更高版本的 kubectl。
. /note &amp;gt;}}
安装 kubectl 插件 插件只不过是一个独立的可执行文件，名称以 kubectl- 开头。要安装插件，只需将此可执行文件移动到路径上的任何位置。
. note &amp;gt;}}
Kubernetes 不提供包管理器或任何类似于安装或更新插件的东西。你有责任确保插件可执行文件的文件名以 kubectl- 开头，并将它们放在你路径的某个位置。 . /note &amp;gt;}}
发现插件 kubectl 提供一个命令 kubectl plugin list，用于搜索路径查找有效的插件可执行文件。 执行此命令将遍历路径中的所有文件。任何以 kubectl- 开头的可执行文件都将在这个命令的输出中以它们在路径中出现的顺序显示。 任何以 kubectl- 开头的文件如果不可执行，都将包含一个警告。 对于任何相同的有效插件文件，都将包含一个警告。
限制 目前无法创建覆盖现有 kubectl 命令的插件，例如，创建一个插件 kubectl-version 将导致该插件永远不会被执行，因为现有的 kubectl-version 命令总是优先于它执行。 由于这个限制，也不可能使用插件将新的子命令添加到现有的 kubectl 命令中。例如，通过将插件命名为 kubectl-create-foo 来添加子命令 kubectl create foo 将导致该插件被忽略。对于任何试图这样做的有效插件 kubectl plugin list 的输出中将显示警告。</description>
    </item>
    
    <item>
      <title>😝 - 管理巨页（HugePages）</title>
      <link>https://lijun.in/tasks/manage-hugepages/scheduling-hugepages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/manage-hugepages/scheduling-hugepages/</guid>
      <description>. feature-state state=&amp;quot;stable&amp;rdquo; &amp;gt;}}
作为 GA 特性，Kubernetes 支持在 Pod 应用中使用预先分配的巨页。本文描述了用户如何使用巨页，以及当前的限制。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}}  为了使节点能够上报巨页容量，Kubernetes 节点必须预先分配巨页。每个节点只能预先分配一种特定规格的巨页。  节点会自动发现全部巨页资源，并作为可供调度的资源进行上报。
API 用户可以通过在容器级别的资源需求中使用资源名称 hugepages-&amp;lt;size&amp;gt; 来使用巨页，其中的 size 是特定节点上支持的以整数值表示的最小二进制单位。 例如，如果节点支持 2048KiB 的页面规格， 它将暴露可供调度的资源 hugepages-2Mi。 与 CPU 或内存不同，巨页不支持过量使用（overcommit）。 注意，在请求巨页资源时，还必须请求内存或 CPU 资源。
apiVersion: v1 kind: Pod metadata: generateName: hugepages-volume- spec: containers: - image: fedora:latest command: - sleep - inf name: example volumeMounts: - mountPath: /hugepages name: hugepage resources: limits: hugepages-2Mi: 100Mi memory: 100Mi requests: memory: 100Mi volumes: - name: hugepage emptyDir: medium: HugePages  巨页的资源请求值必须等于其限制值。该条件在指定了资源限制，而没有指定请求的情况下默认成立。 巨页是被隔离在 pod 作用域的，计划在将来的迭代中实现容器级别的隔离。 巨页可用于 EmptyDir 卷，不过 EmptyDir 卷所使用的巨页数量不能够超出 Pod 请求的巨页数量。 通过带有 SHM_HUGETLB 的 shmget() 使用巨页的应用，必须运行在一个与 proc/sys/vm/hugetlb_shm_group 匹配的补充组下。 通过 ResourceQuota 资源，可以使用 hugepages-&amp;lt;size&amp;gt; 标记控制每个命名空间下的巨页使用量， 类似于使用 cpu 或 memory 来控制其他计算资源。  待实现的特性  在 pod 级别隔离的基础上，支持巨页在容器级别的隔离。 作为服务质量特性，保证巨页的 NUMA 局部性。 支持 LimitRange 。  </description>
    </item>
    
    <item>
      <title>😝 - 调度 GPUs</title>
      <link>https://lijun.in/tasks/manage-gpus/scheduling-gpus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tasks/manage-gpus/scheduling-gpus/</guid>
      <description>Kubernetes 支持对节点上的 AMD 和 NVIDA GPU 进行管理，目前处于实验状态。对 NVIDIA GPU 的支持在 v1.6 中加入，已经经历了多次不向后兼容的迭代。而对 AMD GPU 的支持则在 v1.9 中通过 设备插件 加入。
这个页面介绍了用户如何在不同的 Kubernetes 版本中使用 GPU，以及当前存在的一些限制。
从 v1.8 起 从 1.8 版本开始，我们推荐通过 设备插件 的方式来使用 GPU。
在 1.10 版本之前，为了通过设备插件开启 GPU 的支持，我们需要在系统中将 DevicePlugins 这一特性开关显式地设置为 true：--feature-gates=&amp;quot;DevicePlugins=true&amp;quot;。不过， 从 1.10 版本开始，我们就不需要这一步骤了。
接着你需要在主机节点上安装对应厂商的 GPU 驱动并运行对应厂商的设备插件 (AMD、NVIDIA)。
当上面的条件都满足，Kubernetes 将会暴露 nvidia.com/gpu 或 amd.com/gpu 来作为 一种可调度的资源。
你也能通过像请求 cpu 或 memory 一样请求 &amp;lt;vendor&amp;gt;.com/gpu 来在容器中使用 GPU。然而，当你要通过指定资源请求来使用 GPU 时，存在着以下几点限制：
 GPU 仅仅支持在 limits 部分被指定，这表明：  你可以仅仅指定 GPU 的 limits 字段而不必须指定 requests 字段，因为 Kubernetes 会默认使用 limit 字段的值来作为 request 字段的默认值。 你能同时指定 GPU 的 limits 和 requests 字段，但这两个值必须相等。 你不能仅仅指定 GPU 的 request 字段而不指定 limits。   容器（以及 pod）并不会共享 GPU，也不存在对 GPU 的过量使用。 每一个容器能够请求一个或多个 GPU。然而只请求一个 GPU 的一部分是不允许的。  下面是一个例子:</description>
    </item>
    
  </channel>
</rss>