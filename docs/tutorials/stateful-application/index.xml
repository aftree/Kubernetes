<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😎 - 有状态的应用 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/tutorials/stateful-application/</link>
    <description>Recent content in 😎 - 有状态的应用 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/tutorials/stateful-application/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>示例：使用 Persistent Volumes 部署 WordPress 和 MySQL</title>
      <link>https://lijun.in/tutorials/stateful-application/mysql-wordpress-persistent-volume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tutorials/stateful-application/mysql-wordpress-persistent-volume/</guid>
      <description>本示例描述了如何通过 Minikube 在 Kubernetes 上安装 WordPress 和 MySQL。这两个应用都使用 PersistentVolumes 和 PersistentVolumeClaims 保存数据。
PersistentVolume（PV）是一块集群里由管理员手动提供，或 kubernetes 通过 StorageClass 动态创建的存储。 PersistentVolumeClaim（PVC）是一个满足对 PV 存储需要的请求。PersistentVolumes 和 PersistentVolumeClaims 是独立于 Pod 生命周期而在 Pod 重启，重新调度甚至删除过程中保存数据。
. warning &amp;gt;}}
deployment 在生产场景中并不适合，它使用单实例 WordPress 和 MySQL Pods。考虑使用 WordPress Helm Chart 在生产场景中部署 WordPress。 . /warning &amp;gt;}}
. note &amp;gt;}}
本教程中提供的文件使用 GA Deployment API，并且特定于 kubernetes 1.9 或更高版本。如果您希望将本教程与 Kubernetes 的早期版本一起使用，请相应地更新 API 版本，或参考本教程的早期版本。 . /note &amp;gt;}}
. heading &amp;ldquo;objectives&amp;rdquo; %}}  创建 PersistentVolumeClaims 和 PersistentVolumes 创建 kustomization.</description>
    </item>
    
    <item>
      <title>StatefulSet 基础</title>
      <link>https://lijun.in/tutorials/stateful-application/basic-stateful-set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tutorials/stateful-application/basic-stateful-set/</guid>
      <description>本教程介绍如何了使用 StatefulSets 来管理应用。演示了如何创建、删除、扩容/缩容和更新 StatefulSets 的 Pods。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} 在开始本教程之前，你应该熟悉以下 Kubernetes 的概念：
 Pods Cluster DNS Headless Services PersistentVolumes [PersistentVolume Provisioning](https://github.com/kubernetes/examples/tree/. param &amp;ldquo;githubbranch&amp;rdquo; &amp;gt;}}/staging/persistent-volume-provisioning/) StatefulSets kubectl CLI  本教程假设你的集群被配置为动态的提供 PersistentVolumes。如果没有这样配置，在开始本教程之前，你需要手动准备 2 个 1 GiB 的存储卷。
. heading &amp;ldquo;objectives&amp;rdquo; %}} StatefulSets 旨在与有状态的应用及分布式系统一起使用。然而在 Kubernetes 上管理有状态应用和分布式系统是一个宽泛而复杂的话题。为了演示 StatefulSet 的基本特性，并且不使前后的主题混淆，你将会使用 StatefulSet 部署一个简单的 web 应用。
在阅读本教程后，你将熟悉以下内容：
 如何创建 StatefulSet StatefulSet 怎样管理它的 Pods 如何删除 StatefulSet 如何对 StatefulSet 进行扩容/缩容 如何更新一个 StatefulSet 的 Pods  创建 StatefulSet 作为开始，使用如下示例创建一个 StatefulSet。它和 StatefulSets 概念中的示例相似。它创建了一个 Headless Service nginx 用来发布 StatefulSet web 中的 Pod 的 IP 地址。</description>
    </item>
    
    <item>
      <title>示例：使用 Stateful Sets 部署 Cassandra</title>
      <link>https://lijun.in/tutorials/stateful-application/cassandra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tutorials/stateful-application/cassandra/</guid>
      <description>目录  准备工作 Cassandra docker 镜像 快速入门 步骤1：创建 Cassandra Headless Service 步骤2：使用 StatefulSet 创建 Cassandra Ring 环 步骤3：验证并修改 Cassandra StatefulSet 步骤4：删除 Cassandra StatefulSet 步骤5：使用 Replication Controller 创建 Cassandra 节点 pods 步骤6：Cassandra 集群扩容 步骤7：删除 Replication Controller 步骤8：使用 DaemonSet 替换 Replication Controller 步骤9：资源清理 Seed Provider Source  下文描述了在 Kubernetes 上部署一个_云原生_ Cassandra 的过程。当我们说_云原生_时，指的是一个应用能够理解它运行在一个集群管理器内部，并且使用这个集群的管理基础设施来帮助实现这个应用。特别的，本例使用了一个自定义的 Cassandra SeedProvider 帮助 Cassandra 发现新加入集群 Cassandra 节点。
本示例也使用了Kubernetes的一些核心组件：
 Pods Services Replication Controllers Stateful Sets Daemon Sets  准备工作 本示例假设你已经安装运行了一个 Kubernetes集群（版本 &amp;gt;=1.</description>
    </item>
    
    <item>
      <title>运行 ZooKeeper， 一个 CP 分布式系统</title>
      <link>https://lijun.in/tutorials/stateful-application/zookeeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/tutorials/stateful-application/zookeeper/</guid>
      <description>本教程展示了在 Kubernetes 上使用 PodDisruptionBudgets 和 PodAntiAffinity 特性运行 Apache Zookeeper。
. heading &amp;ldquo;prerequisites&amp;rdquo; %}} 在开始本教程前，你应该熟悉以下 Kubernetes 概念。
 Pods Cluster DNS Headless Services PersistentVolumes [PersistentVolume Provisioning](http://releases.k8s.io/. param &amp;ldquo;githubbranch&amp;rdquo; &amp;gt;}}/examples/persistent-volume-provisioning/) ConfigMaps StatefulSets PodDisruptionBudgets PodAntiAffinity kubectl CLI  你需要一个至少包含四个节点的集群，每个节点至少 2 CPUs 和 4 GiB 内存。在本教程中你将会 cordon 和 drain 集群的节点。这意味着集群节点上所有的 Pods 将会被终止并移除。这些节点也会暂时变为不可调度。在本教程中你应该使用一个独占的集群，或者保证你造成的干扰不会影响其它租户。
本教程假设你的集群配置为动态的提供 PersistentVolumes。如果你的集群没有配置成这样，在开始本教程前，你需要手动准备三个 20 GiB 的卷。
. heading &amp;ldquo;objectives&amp;rdquo; %}} 在学习本教程后，你将熟悉下列内容。
 如何使用 StatefulSet 部署一个 ZooKeeper ensemble。 如何使用 ConfigMaps 一致性配置 ensemble。 如何在 ensemble 中 分布 ZooKeeper 服务的部署。 如何在计划维护中使用 PodDisruptionBudgets 确保服务可用性。  ZooKeeper 基础 Apache ZooKeeper 是一个分布式的开源协调服务，用于分布式系统。ZooKeeper 允许你读取、写入数据和发现数据更新。数据按层次结构组织在文件系统中，并复制到 ensemble（一个 ZooKeeper 服务的集合） 中所有的 ZooKeeper 服务。对数据的所有操作都是原子的和顺序一致的。ZooKeeper 通过 Zab 一致性协议在 ensemble 的所有服务之间复制一个状态机来确保这个特性。</description>
    </item>
    
  </channel>
</rss>