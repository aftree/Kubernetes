<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows Kubernetes on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/setup/production-environment/windows/</link>
    <description>Recent content in Windows Kubernetes on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/setup/production-environment/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes 中调度 Windows 容器的指南</title>
      <link>https://lijun.in/setup/production-environment/windows/user-guide-windows-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/setup/production-environment/windows/user-guide-windows-containers/</guid>
      <description>Windows 应用程序构成了许多组织中运行的服务和应用程序的很大一部分。本指南将引导您完成在 Kubernetes 中配置和部署 Windows 容器的步骤。
目标  配置一个示例 deployment 以在 Windows 节点上运行 Windows 容器 （可选）使用组托管服务帐户（GMSA）为您的 Pod 配置 Active Directory 身份  在你开始之前  创建一个 Kubernetes 集群，其中包括一个运行 Windows Server 的主节点和工作节点 重要的是要注意，对于 Linux 和 Windows 容器，在 Kubernetes 上创建和部署服务和工作负载的行为几乎相同。与集群接口的 Kubectl 命令相同。提供以下部分中的示例只是为了快速启动 Windows 容器的使用体验。  入门：部署 Windows 容器 要在 Kubernetes 上部署 Windows 容器，您必须首先创建一个示例应用程序。下面的示例 YAML 文件创建了一个简单的 Web 服务器应用程序。创建一个名为 win-webserver.yaml 的服务规约，其内容如下：
apiVersion: v1 kind: Service metadata: name: win-webserver labels: app: win-webserver spec: ports: # the port that this service should serve on - port: 80 targetPort: 80 selector: app: win-webserver type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata: labels: app: win-webserver name: win-webserver spec: replicas: 2 selector: matchLabels: app: win-webserver template: metadata: labels: app: win-webserver name: win-webserver spec: containers: - name: windowswebserver image: mcr.</description>
    </item>
    
  </channel>
</rss>