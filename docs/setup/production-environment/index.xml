<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>💖 - 生产环境 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/setup/production-environment/</link>
    <description>Recent content in 💖 - 生产环境 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/setup/production-environment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>容器运行时</title>
      <link>https://lijun.in/setup/production-environment/container-runtimes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/setup/production-environment/container-runtimes/</guid>
      <description>. feature-state for_k8s_version=&amp;quot;v1.6&amp;rdquo; state=&amp;quot;stable&amp;rdquo; &amp;gt;}}
Kubernetes 使用容器运行时来实现在 pod 中运行容器。 这是各种运行时的安装说明。
. caution &amp;gt;}}
我们发现 runc 在运行容器，处理系统文件描述符时存在一个漏洞。 恶意容器可以利用此漏洞覆盖 runc 二进制文件的内容，并以此在主机系统的容器上运行任意的命令。
请参考此链接以获取有关此问题的更多信息 [cve-2019-5736 : runc vulnerability ] (https://access.redhat.com/security/cve/cve-2019-5736) . /caution &amp;gt;}}
适用性 . note &amp;gt;}}
本文档是为在 Linux 上安装 CRI 的用户编写的。 对于其他操作系统，请查找特定于您平台的文档。 . /note &amp;gt;}}
您应该以 root 身份执行本指南中的所有命令。 例如，使用 sudo 前缀命令，或者成为 root 并以该用户身份运行命令。
Cgroup 驱动程序 当某个 Linux 系统发行版使用 systemd 作为其初始化系统时，初始化进程会生成并使用一个 root 控制组 （cgroup），并充当 cgroup 管理器。 systemd 与 cgroup 集成紧密，并将为每个进程分配 cgroup。 您也可以配置容器运行时和 kubelet 使用 cgroupfs。 连同 systemd 一起使用 cgroupfs 意味着将有两个不同的 cgroup 管理器。</description>
    </item>
    
  </channel>
</rss>