<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>😍 - kubectl 命令行界面 on Hugo 主题的 Learn 文档</title>
    <link>https://lijun.in/reference/kubectl/</link>
    <description>Recent content in 😍 - kubectl 命令行界面 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lijun.in/reference/kubectl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>kubectl 概述</title>
      <link>https://lijun.in/reference/kubectl/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/reference/kubectl/overview/</guid>
      <description>Kubectl 是一个命令行接口，用于对 Kubernetes 集群运行命令。kubectl 在 $HOME/.kube 目录中寻找一个名为 config 的文件。您可以通过设置环境变量 KUBECONFIG 或设置 --kubeconfig 参数指定其它 kubeconfig 文件。
本文概述了 kubectl 语法和命令操作描述，并提供了常见的示例。有关每个命令的详细信息，包括所有受支持的参数和子命令，请参阅 kubectl 参考文档。有关安装说明，请参见 安装 kubectl 。
语法 使用以下语法 kubectl 从终端窗口运行命令：
kubectl [command] [TYPE] [NAME] [flags] 其中 command、TYPE、NAME 和 flags 分别是：
  command：指定要对一个或多个资源执行的操作，例如 create、get、describe、delete。
  TYPE：指定资源类型。资源类型不区分大小写，可以指定单数、复数或缩写形式。例如，以下命令输出相同的结果:
```shell kubectl get pod pod1 kubectl get pods pod1 kubectl get po pod1 ```      NAME：指定资源的名称。名称区分大小写。如果省略名称，则显示所有资源的详细信息 kubectl get pods。
在对多个资源执行操作时，您可以按类型和名称指定每个资源，或指定一个或多个文件：
    要按类型和名称指定资源：</description>
    </item>
    
    <item>
      <title>JSONPath 支持</title>
      <link>https://lijun.in/reference/kubectl/jsonpath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/reference/kubectl/jsonpath/</guid>
      <description>Kubectl 支持 JSONPath 模板。
JSONPath 模板由 {} 包起来的 JSONPath 表达式组成。Kubectl 使用 JSONPath 表达式来过滤 JSON 对象中的特定字段并格式化输出。除了原始的 JSONPath 模板语法，以下函数和语法也是有效的:
 使用双引号将 JSONPath 表达式内的文本引起来。 使用 range，end 运算符来迭代列表。 使用负片索引后退列表。负索引不会&amp;quot;环绕&amp;quot;列表，并且只要 -index + listLength&amp;gt; = 0 就有效。  note &amp;gt;}}
  $ 运算符是可选的，因为默认情况下表达式总是从根对象开始。
  结果对象将作为其 String() 函数输出。
  /note &amp;gt;}}
给定 JSON 输入:
{ &amp;#34;kind&amp;#34;: &amp;#34;List&amp;#34;, &amp;#34;items&amp;#34;:[ { &amp;#34;kind&amp;#34;:&amp;#34;None&amp;#34;, &amp;#34;metadata&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;127.0.0.1&amp;#34;}, &amp;#34;status&amp;#34;:{ &amp;#34;capacity&amp;#34;:{&amp;#34;cpu&amp;#34;:&amp;#34;4&amp;#34;}, &amp;#34;addresses&amp;#34;:[{&amp;#34;type&amp;#34;: &amp;#34;LegacyHostIP&amp;#34;, &amp;#34;address&amp;#34;:&amp;#34;127.0.0.1&amp;#34;}] } }, { &amp;#34;kind&amp;#34;:&amp;#34;None&amp;#34;, &amp;#34;metadata&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;127.0.0.2&amp;#34;}, &amp;#34;status&amp;#34;:{ &amp;#34;capacity&amp;#34;:{&amp;#34;cpu&amp;#34;:&amp;#34;8&amp;#34;}, &amp;#34;addresses&amp;#34;:[ {&amp;#34;type&amp;#34;: &amp;#34;LegacyHostIP&amp;#34;, &amp;#34;address&amp;#34;:&amp;#34;127.</description>
    </item>
    
    <item>
      <title>kubectl</title>
      <link>https://lijun.in/reference/kubectl/kubectl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/reference/kubectl/kubectl/</guid>
      <description>. heading &amp;ldquo;synopsis&amp;rdquo; %}} kubectl 管理控制 Kubernetes 集群。
获取更多信息，请访问 kubectl 概述。
kubectl [flags] . heading &amp;ldquo;options&amp;rdquo; %}} &amp;lt;tr&amp;gt; &amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;--add-dir-header&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;line-height: 130%; word-wrap: break-word;&amp;quot;&amp;gt; &amp;lt;!-- If true, adds the file directory to the header --&amp;gt; 设置为 true 表示添加文件目录到 header 中 &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;--alsologtostderr&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;line-height: 130%; word-wrap: break-word;&amp;quot;&amp;gt; &amp;lt;!-- log to standard error as well as files --&amp;gt; 表示将日志输出到文件的同时输出到 stderr &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;--as string&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;line-height: 130%; word-wrap: break-word;&amp;quot;&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>kubectl 命令</title>
      <link>https://lijun.in/reference/kubectl/kubectl-cmds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/reference/kubectl/kubectl-cmds/</guid>
      <description>kubectl 命令参考</description>
    </item>
    
    <item>
      <title>kubectl 备忘单</title>
      <link>https://lijun.in/reference/kubectl/cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/reference/kubectl/cheatsheet/</guid>
      <description>也可以看下: Kubectl 概述 和 JsonPath 指南。
本页面是 kubectl 命令的概述。
kubectl - 备忘单 Kubectl 自动补全 BASH ​```bash source &amp;lt;(kubectl completion bash) # 在 bash 中设置当前 shell 的自动补全，要先安装 bash-completion 包。 echo &amp;ldquo;source &amp;lt;(kubectl completion bash)&amp;rdquo; &amp;raquo; ~/.bashrc # 在您的 bash shell 中永久的添加自动补全
 &amp;lt;!-- You can also use a shorthand alias for `kubectl` that also works with completion: --&amp;gt; 您还可以为 `kubectl` 使用一个速记别名，该别名也可以与 completion 一起使用： ```bash alias k=kubectl complete -F __start_kubectl k ZSH ​```bash source &amp;lt;(kubectl completion zsh) # 在 zsh 中设置当前 shell 的自动补全 echo &amp;ldquo;if [ $commands[kubectl] ]; then source &amp;lt;(kubectl completion zsh); fi&amp;rdquo; &amp;raquo; ~/.</description>
    </item>
    
    <item>
      <title>kubectl 的用法约定</title>
      <link>https://lijun.in/reference/kubectl/conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/reference/kubectl/conventions/</guid>
      <description>kubectl 的推荐用法约定
在可重用脚本中使用 kubectl 对于脚本中的稳定输出：
 请求一个面向机器的输出格式，例如 -o name、-o json、-o yaml、-o go template 或 -o jsonpath。 完全限定版本。例如 jobs.v1.batch/myjob。这将确保 kubectl 不会使用其默认版本，该版本会随着时间的推移而更改。 在使用基于生成器的命令（例如 kubectl run 或者 kubectl expose）时，指定 --generator 参数以固定到特定行为。 不要依赖上下文、首选项或其他隐式状态。  最佳实践 kubectl run 若希望 kubectl run 满足基础设施即代码的要求：
 使用特定版本的标签标记镜像，不要将该标签移动到新版本。例如，使用 :v1234、v1.2.3、r03062016-1-4，而不是 :latest（有关详细信息，请参阅配置的最佳实践)。 固定到特定的生成器版本，例如 kubectl run --generator=run-pod/v1。 使用基于版本控制的脚本来记录所使用的参数，或者至少使用 --record 参数以便为所创建的对象添加注解，在使用轻度参数化的镜像时，记录下所使用的命令行。 使用基于版本控制的脚本来运行包含大量参数的镜像。 对于无法通过 kubectl run 参数来表示的功能特性，使用基于源码控制的配置文件，以记录要使用的功能特性。  生成器 您可以使用带有 --generator 参数的 kubectl run 命令创建如下资源：
table caption=&amp;quot;可以使用 kubectl run 创建的资源&amp;rdquo; &amp;gt;}} | 资源 | API 组 | kubectl 命令 | |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; | | Pod | v1 | kubectl run --generator=run-pod/v1 | | ReplicationController (已弃用) | v1 | kubectl run --generator=run/v1 | | Deployment (已弃用) | extensions/v1beta1 | kubectl run --generator=deployment/v1beta1 | | Deployment (已弃用) | apps/v1beta1 | kubectl run --generator=deployment/apps.</description>
    </item>
    
    <item>
      <title>适用于 Docker 用户的 kubectl</title>
      <link>https://lijun.in/reference/kubectl/docker-cli-to-kubectl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lijun.in/reference/kubectl/docker-cli-to-kubectl/</guid>
      <description>您可以使用 Kubernetes 命令行工具 kubectl 与 API 服务器进行交互。如果您熟悉 Docker 命令行工具，则使用 kubectl 非常简单。但是，docker 命令和 kubectl 命令之间有一些区别。以下显示了 docker 子命令，并描述了等效的 kubectl 命令。
docker run 要运行 nginx 部署并将其暴露，请参见 kubectl 运行。
docker:
docker run -d --restart=always -e DOMAIN=cluster --name nginx-app -p 80:80 nginx 55c103fa129692154a7652490236fee9be47d70a8dd562281ae7d2f9a339a6db docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 55c103fa1296 nginx &amp;quot;nginx -g &#39;daemon of…&amp;quot; 9 seconds ago Up 9 seconds 0.0.0.0:80-&amp;gt;80/tcp nginx-app kubectl:
# 启动运行 nginx 的 Pod kubectl run --image=nginx nginx-app --port=80 --env=&amp;#34;DOMAIN=cluster&amp;#34; deployment &amp;quot;nginx-app&amp;quot; created note &amp;gt;}}</description>
    </item>
    
  </channel>
</rss>